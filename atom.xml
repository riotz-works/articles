<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Articles | Riotz.works</title>
  
  
  <link href="/articles/atom.xml" rel="self"/>
  <link href="http://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://riotz.works/articles/"/>
  <updated>2020-09-28T04:38:12.000Z</updated>
  <id>https://riotz.works/articles/</id>
  
  <author>
    <name>Riotz.works</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年の振り返り</title>
    <link href="https://riotz.works/articles/lulzneko/2019/12/31/review-of-2019/"/>
    <id>https://riotz.works/articles/lulzneko/2019/12/31/review-of-2019/</id>
    <published>2019-12-30T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>2019年最後のポスト、１年間の活動を振り返ります。</p><p><img src="/articles/assets/lulzneko/review.jpg" alt=""></p><h3 id="サマリー"><a href="#サマリー" class="headerlink" title="サマリー"></a>サマリー</h3><ul><li>発表: 16回</li><li>記事: 61本</li><li>プルリク: 17本</li><li>アプリ開発: ４本</li><li>ハッカソン: ２回</li><li>Special Topics: ２つ</li></ul><h3 id="発表-16回"><a href="#発表-16回" class="headerlink" title="発表 16回"></a>発表 16回</h3><p>今年は１月を除いて毎月発表する機会がありました。大きいイベントから勉強会、LT、クローズドの会と多様な場所で話をする機会を頂け、そして多くの出会いに感謝です。ありがとうございます！</p><p>去年の６回から、今年は17回と約３倍の発表に臨みました。その中で技術やナレッジを伝えるにあたって話をするのは、私に合った方法なのかなと感じ、引き続き発表の場に立てるよう研鑽して行きたいです。</p><ul><li><a href="https://event.shoeisha.jp/devsumi/20190214/" target="_blank" rel="noopener">Developers Summit 2019</a>にて『<a href="https://riotz.works/slides/2019-devsumi/">サーバーレスで最高に楽しめるアプリ開発</a>」を発表。</li><li><a href="https://jawsdays2019.jaws-ug.jp/" target="_blank" rel="noopener">JAWS DAYS 2019</a>にて『<a href="https://riotz.works/slides/2019-jaws-days/">AWS x JAMstack で構築・運用するサーバーレスな Web Front</a>』を発表。</li><li><a href="https://cto-samurai.connpass.com/event/120473/" target="_blank" rel="noopener">CTO vs Hackers ハッカソン</a>にて『<a href="https://riotz.works/slides/2019-cto-vs-hackers-hackathon/">「ミツカルヘアサロン💇」〜個人が提案する時代に向けたアプリ～</a>』を発表。</li><li><a href="https://eventregist.com/e/xiza3ieCWYFc" target="_blank" rel="noopener">Shiftup! JP_Getshifter Vol3</a>にて『<a href="https://riotz.works/slides/2019-shiftup-jp_getshifter-vol3/">JAMstackで構築・運用するサーバーレスなウェブフロント</a>』を発表。</li><li><a href="https://spajam.jp/2019/entry/tokyo-a/" target="_blank" rel="noopener">SPAJAM 2019 東京A予選</a>にて『<a href="https://riotz.works/slides/2019-spajam-qualification/">パーソナルニュースの配信と交換によって爆速で仲良くなるアプリ「📰NEWʑ Link」</a>』を発表。</li><li><a href="https://serverless.connpass.com/event/130509/" target="_blank" rel="noopener">Serverless Meetup Tokyo #12</a>にて『<a href="https://riotz.works/slides/2019-serverless-meetup-tokyo12/">サーバーレスなウェブフロントを実現する JAMstack</a>』を発表。</li><li><a href="https://javascript-fes.doorkeeper.jp/events/90894" target="_blank" rel="noopener">初夏のJavaScript祭 in メンバーズキャリア</a>にて『<a href="https://riotz.works/slides/2019-javascript-matsuri/">Gridsome で作る JAMstack な サーバーレス Web Front</a>』を発表。</li><li><a href="https://riotz.works/slides/2019-attendance-tech-lt/">勤怠を自動化する技術 LT Night</a>にて『<a href="https://riotz.works/slides/2019-attendance-tech-lt/">Web-NFC の PWA で 簡単タイムレコーダー「ツカエタルヒの記録」</a>』を LT しました。</li><li><a href="https://cloudnativedays.jp/cndt2019/" target="_blank" rel="noopener">CloudNative Days Tokyo 2019</a>にて『<a href="https://riotz.works/slides/2019-cloudnative-days/">サーバレス・ネイティブ が お伝えするフルサーバレス開発の魅力！</a>』を発表。</li><li><a href="https://eventregist.com/e/0if9nERXstQg" target="_blank" rel="noopener">Shiftup! JP_Getshifter Vol5</a>にて『<a href="https://riotz.works/slides/2019-shiftup-jp_getshifter-vol5/">Shifter＋SSG(Static Site Generator) が生み出す、新しい WordPress の世界</a>』を発表。</li><li>クローズドな New Biz アイデアソンにて『<a href="https://riotz.works/slides/2019-newbiz-ideathon/">１分間のショートピッチ</a>』を２回しました。</li><li>クローズドなサーバーレス勉強会で『ログのトレーサビリティ』について発表をしました。</li><li><a href="https://2019.tokyo.wordcamp.org/" target="_blank" rel="noopener">WordCamp Tokyo 2019</a>にて『<a href="https://riotz.works/slides/2019-wordcamp-tokyo/">WordPress と SSG が 織りなす WordPress ウェブフロントの新世界</a>』を発表。</li><li><a href="https://engineers.connpass.com/event/154495/" target="_blank" rel="noopener">プロポーザルの書き方を学ぼう- 登壇の技術を勉強する会</a>にて『<a href="https://riotz.works/slides/2019-cfp-study/">個人やサークルとして応募する CfP、あるいは その思い切り</a>』を発表。</li><li>クローズドなウェブフロント勉強会にて『<a href="https://riotz.works/slides/2019-web-frontend-study/">JAMstack/PWA アーキテクチャの紹介</a>』の発表をしました。</li><li><a href="https://pwanight.connpass.com/event/156622/" target="_blank" rel="noopener">PWA Night vol.11 ～PWA × CMS～</a>にて『<a href="https://riotz.works/slides/2019-pwa-night-11/">WordPress と SSG で作る、情報発信サイト の JAMstack な PWA</a>』を発表。</li></ul><p>１つ１つが大きな思い出がありスライド埋め込みやサマリーを書きたいですが、書ききれなそうなのでいくつかをピックアップしてサマリーします。</p><p>年初よりデブサミで発表できたのがスゴイ経験になりました。300 席の会場で立ち見という状況、集客率ランキング 15位と多くの方に関心を持っていただけ嬉しいです。これだ多くの方の前で話をしたのは初めてでした。そして多くの方にサーバーレスでの開発の楽しさをお伝えできてよかったです。いつかまたデブサミの場に立ち、今度は満足度ランキングに載れるような良い発表をできるように技術を磨きたいです。</p><p>そして JAWS DAYS 2019。普段 AWS を使って開発をしている中で JAWS DAYS を、はじめとするコミュニティで勉強させて頂いているのを何か返したいとのことで、JAMstack というキーワードが注目を集め始めている中、サーバーレスという観点から JAMstack を取り上げて伝えることができ、コミュニティに少しでも貢献できたのかなと。<br>また、こちらのイベントでは私の活動を大きく変える転換点となりました。</p><p>JAWS DAYS 2019 で Shifter の<a href="https://twitter.com/seijiakatsuka" target="_blank" rel="noopener">Seiji Akatsuka（@seijiakatsuka）さん</a>に誘われ Shiftup! JP_Getshifter Vol3 で発表します。<br>これまでカンファレンスでの発表だけだったので、いわゆる勉強会形式での発表は初めてで、とても緊張しました。しかしながら聞いてくださる方がそばにいて、途中休憩や懇親会で発表前後でカジュアルに参加者さんと話ができる(& 🍺 もある) のが新鮮で、また楽しかったです。このカジュアルな時間から Shifter + SSG のアイデアが生み出され、そして公式神対応という流れが発生します。まさに勉強し新たな世界が作られるのを経験させていただきました。ありがとうございます。</p><ul><li><a href="https://blog.photosynthesic.jp/2019/04/gridsome%e3%81%ae%e3%82%b9%e3%82%b9%e3%83%a1%e3%81%a8shifter%e3%81%ae%e5%8f%af%e8%83%bd%e6%80%a7%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6/" target="_blank" rel="noopener">gridsomeのススメとShifterの可能性について – Photosynthesic blog</a></li><li><a href="https://riotz.works/articles/lulzneko/2019/04/06/think-of-shifters-headlesscms-nize-on-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ 振り返り、Shifterのヘッドレス CMS 化に思いを馳せる | Articles | Riotz.works</a></li><li><a href="https://www.digitalcube.jp/shifter/8619/" target="_blank" rel="noopener">ShifterでWebhookによる外部デプロイが可能になりました！ - 株式会社デジタルキューブ</a></li></ul><p>そして、その Shiftup! JP_Getshifter Vol3 で様々な出会いが生まれ、Serverless Meetup Tokyo #12、初夏のJavaScript祭 in メンバーズキャリア、WordCamp Tokyo 2019 とつながっていき、今新たなプロジェクトに参画するという大きな変化につながっていきます。人生何があるかわからない。</p><p>また初挑戦としては、勤怠を自動化する技術 LT Night で LT にも初挑戦しました。５分、短かっ！見事２分オーバー。すみません。<br>いろいろ反省する中で、私は話が長いので、もう少し尺の長いものが会うんだろうなぁと思いつつ、一気に話し切る経験は楽しく、また LT に挑戦したいです。</p><p>「クローズドな勉強会」が登場するようにもなりました。いろいろな都合により参加者が限られているものですが、話した内容はアウトプット。多くの情報を落とし分かりにくい話にはなってしまいますが、せっかくなので汎化して載せるようにしています。ほぼ作り直しの作業になるので、時間がかかって準備中が取れないものもありますが、可能な限り出したいです。オープンなイベントで話をしたいのはありますが、いろいろな事情があるのでクローズドになるのも仕方なく、そのような場合でも声をかけていただき発表できるのはうれしいので、もしニーズがありましたら声をかけていただけると嬉しいです。</p><p>といった発表活動をサマったのが「プロポーザルの書き方を学ぼう- 登壇の技術を勉強する会」。<br>CfP に、どうやって応募するの、どんな書き方がいいのという話をカンファレンスのオーガナイザーが話をするという面白い勉強会。LT 枠でしたが、後枠が空いてたので 10分いただきトークさせていただきました。ちょうど Riotz.works という活動のサマリーをしたかったので、良い機会になるとともにサークルとしての活動を発信したいという思いもあり、お話しできてよかったです。</p><p>そして〆は PWA Night vol.11。もともと PWA 好きで去年の SPAJAM 2018 東京Ｄ予選<a href="https://riotz.works/slides/2018-spajam-qualification/">リアルタイムの競演と参加型観戦で音楽を最高に楽しむ「ラップ､タップ､アップ🎶」</a>、今年の SPAJAM 2019 東京Ａ予選<a href="https://riotz.works/slides/2019-spajam-qualification/">パーソナルニュースの配信と交換によって爆速で仲良くなるアプリ「📰NEWʑ Link」</a>とモバイルアプリのハッカソンなのに PWA で戦ってきました。(去年は予選優秀賞を取れたので PWA はスゴイ！)<br>が、今年の後半は JAMstack を中心に発信し PWA の発信がなくなっていました。そんな中、改めて PWA を思い起こさせていただきました。JAMstack と PWA は相性が良く、来年はセットでしっかり発信していきたいです。</p><p>と、怒涛の発表の１年でした。<br>ちょっとオーバーペースだったので来年はペース配分を考えながらも、発表は私の情報発信方法の中で自分にとって合うので引き続きしっかりと活動していきたいと思います。<br>あとは似たような方向性としてはハンズオンを作って開催するとかできたらいいなと。</p><h2 id="記事-61本"><a href="#記事-61本" class="headerlink" title="記事 61本"></a>記事 61本</h2><ul><li><a href="/articles/lulzneko/2019/01/23/JAMstack-an-architecture-to-realize-fine-web-front/">JAMstack、それはハイパフォーマンスなウェブフロントを実現するアーキテクチャ</a></li><li><a href="/articles/lulzneko/2019/01/29/how-jamstack-is-used-in-riotsworks/">Riots.works での JAMstack の利用</a></li><li><a href="/articles/lulzneko/2019/02/15/backstage-of-presentation-at-devsumi-2019-winter/">発表者は、その日何をしていたのか - 発表の舞台裏 DevSumi 2019 編</a></li><li><a href="/articles/lulzneko/2019/02/18/summary-of-qa-at-ask-the-speaker-of-devsumi-2019-winter/">デブサミ 2019 Ask the Speaker にて頂いた QA まとめ</a></li><li><a href="/articles/lulzneko/2019/02/23/backstage-of-presentation-at-jawsdays2019/">発表者は、その日何をしていたのか - 発表の舞台裏 JAWS DAYS 2019 編</a></li><li><a href="/articles/lulzneko/2019/02/24/summary-of-qa-at-jawsdays2019/">JAWS DAYS 2019 にて頂いた QA まとめ</a></li><li><a href="/articles/lulzneko/2019/02/27/made-presentation-about-enjoyment-of-serverless-at-devsumi-2019-winter/">デブサミ 2019 にて「サーバーレス開発の楽しさ」について発表をしました</a></li><li><a href="/articles/lulzneko/2019/03/01/made-presentation-about-JAMstack-with-aws-at-jawsdays2019/">JAWS DAYS 2019 にて「AWS x JAMstack なサーバーレス Web Front」について発表をしました</a></li><li><a href="/articles/lulzneko/2019/03/03/google-domains-mail-forwarding-and-gmail-sender-settings/">独自ドメインでメールの送受信できるように、Google Domains のメール転送と Gmail の送信元を設定する</a></li><li><a href="/articles/lulzneko/2019/03/10/cto-vs-hackers-hackathon-chronicle/">CTO vs Hackers ハッカソン戦記</a></li><li><a href="/articles/lulzneko/2019/03/13/pull-request-to-validate-typescript-about-installation-errors/">Validate TypeScript にインストールエラーの修正についてのプルリクを送る</a></li><li><a href="/articles/lulzneko/2019/03/22/trial-input-data-validation-with-validate-typescript/">Validate TypeScript による入力データ検証を試す</a></li><li><a href="/articles/lulzneko/2019/03/28/thinking-about-prefer-function-over-method-rule-of-tslint/">TSLint の prefer-function-over-method ルールについて悩む</a></li><li><a href="/articles/lulzneko/2019/03/30/take-seminar-on-how-to-make-meishi-in-tokyo/">心に刺さる名刺のつくり方セミナー 〜東京編〜 参加レポート</a></li><li><a href="/articles/lulzneko/2019/04/01/k9us-blog-mentoring-to-lulzneko/">ブログメンティ始まる</a></li><li><a href="/articles/lulzneko/2019/04/03/take-seminar-on-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ 参加レポート</a></li><li><a href="/articles/lulzneko/2019/04/05/made-presentation-about-jamstack-at-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ にて「JAMstack なサーバーレス・ウェブフロント」について発表をしました</a></li><li><a href="/articles/lulzneko/2019/04/06/think-of-shifters-headlesscms-nize-on-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ 振り返り、Shifterのヘッドレス CMS 化に思いを馳せる</a></li><li><a href="/articles/lulzneko/2019/04/09/review-of-k9us-blog-mentee-first-week/">ブログメンティふりかえり１週目</a></li><li><a href="/articles/lulzneko/2019/04/10/add-hatena-bookmark-to-sns-share-link-of-hexo-used-in-blog/">ブログで使っている Hexo の SNS 共有リンクに「はてなブックマーク」を追加する</a></li><li><a href="/articles/lulzneko/2019/04/11/improve-sns-shared-links-usability-of-hexo-used-in-blog/">ブログで使っている Hexo の SNS 共有リンクのユーザビリティを高める</a></li><li><a href="/articles/lulzneko/2019/04/17/programmatically-access-google-analytics/">Google Analytics にプログラムでアクセスできるようにする</a></li><li><a href="/articles/lulzneko/2019/04/19/want-to-display-list-of-popular-posts-on-hexo-used-in-blog/">ブログで使っている Hexo に人気の記事リストを表示したい！</a></li><li><a href="/articles/lulzneko/2019/04/20/pull-request-to-hexo-related-popular-posts-about-subpath-enablement/">hexo-related-popular-posts にサブパス対応のプルリクを送る</a></li><li><a href="/articles/lulzneko/2019/04/23/write-easy-to-read-sentences-using-text-proofreading/">「テキスト校正くん」を使って読みやすい文章を書けるようにする</a></li><li><a href="/articles/lulzneko/2019/04/27/manage-personal-tasks-with-asana/">Asana で個人のタスク管理をする</a></li><li><a href="/articles/lulzneko/2019/04/28/review-of-k9us-blog-mentee-4th-week/">ブログメンティふりかえり４週目</a></li><li><a href="/articles/lulzneko/2019/05/02/make-asana-app-window-with-google-chrome/">Asana を Google Chrome でアプリウィンドウ化する</a></li><li><a href="/articles/lulzneko/2019/05/03/make-asana-app-with-nativefier/">Asana を Nativefier でアプリ化する</a></li><li><a href="/articles/lulzneko/2019/05/09/develop-base-app-for-pwa-with-nuxtjs/">Nuxt.js で PWA(Progressive Web Apps) のベースアプリを作る</a></li><li><a href="/articles/lulzneko/2019/05/10/typescripting-base-app-of-nuxtjs-pwa/">Nuxt.js PWA(Progressive Web Apps) のベースアプリをTypeScript対応する</a></li><li><a href="/articles/lulzneko/2019/05/13/deploy-nuxtjs-pwa-base-app-to-github-pages/">Nuxt.js PWA のベースアプリを GitHub Pages へデプロイする</a></li><li><a href="/articles/lulzneko/2019/05/17/easy-poc-with-sandbox-for-typescript-project/">TypeScript プロジェクト用サンドボックスで簡単コード検証</a></li><li><a href="/articles/lulzneko/2019/05/20/spajam-2019-tokyo-a-pre-hackathon-chronicle/">SPAJAM 2019 東京A予選 - ハッカソン戦記</a></li><li><a href="/articles/lulzneko/2019/05/22/add-article-title-to-sns-share-link-of-hexo-used-in-blog/">ブログで使っている Hexo の SNS 共有リンクに記事タイトルを入れる</a></li><li><a href="/articles/lulzneko/2019/05/24/pull-request-to-ga-analytics-about-support-nodejs10/">ga-analytics に Node.js 10 以上対応のプルリクを送る</a></li><li><a href="/articles/lulzneko/2019/05/26/review-of-k9us-blog-mentee-8th-week/">ブログメンティふりかえり８週目</a></li><li><a href="/articles/lulzneko/2019/05/27/made-presentation-about-jamstack-at-serverless-meetup-tokyo-12/">Serverless Meetup Tokyo 12 にて「サーバーレスなウェブフロントを実現する JAMstack」について発表をしました</a></li><li><a href="/articles/lulzneko/2019/06/01/made-presentation-about-jamstack-with-gridsome-at-javascript-matsuri/">初夏のJavaScript祭 in メンバーズキャリアにて「Gridsome で作る JAMstack なサーバーレス Web Front」の発表をしました</a></li><li><a href="/articles/lulzneko/2019/06/03/demo-app-implementation-commentary-presented-at-javascript-matsuri/">初夏のJavaScript祭にて発表した Gridsome のサンプルアプリ実装解説</a></li><li><a href="/articles/lulzneko/2019/06/05/summary-of-oss-friday-activities-in-2019-05/">OSS-Friday 活動 - 2019年5月まとめ</a></li><li><a href="/articles/lulzneko/2019/06/08/automatically-swich-git-configuration-for-each-repository/">Git の設定をリポジトリごとに自動で使い分ける</a></li><li><a href="/articles/lulzneko/2019/06/09/review-of-k9us-blog-mentee-10th-week/">ブログメンティふりかえり10週目</a></li><li><a href="/articles/lulzneko/2019/06/12/httpstatus-makes-http-client-testing-easy/">httpstat.us で、簡単 HTTP クライアントのテスト</a></li><li><a href="/articles/lulzneko/2019/06/15/use-of-vue-components-in-nuxtjs-and-cross-call-with-it/">Nuxt.js で Vue コンポーネントの利用とコンポーネントの相互呼出しをする</a></li><li><a href="/articles/lulzneko/2019/06/17/automatically-swich-environment-variables-to-working-directory-of-shell/">Shell の作業ディレクトリごとに自動で環境変数を設定する</a></li><li><a href="/articles/lulzneko/2019/06/18/lets-create-gitignore-using-generation-service-gitignoreio/">.gitignore は、生成サービス gitignore.io を使って作ろう！</a></li><li><a href="/articles/lulzneko/2019/06/24/serverless-weather-report-slack-bot-sora-kagami/">サーバレスな天気レポートの Slack ボット、「空鏡」</a></li><li><a href="/articles/lulzneko/2019/06/26/where-is-gitignore-of-os-and-ide-specific-setting/">OS や IDE 固有ファイルの .gitignore はどこにする？</a></li><li><a href="/articles/lulzneko/2019/06/29/book-review-of-fun-programming-drill-4402391474/">「ドリルの王様 1,2年のたのしいプログラミング」、自然とプログラミング的思考が身につく問題集</a></li><li><a href="/articles/lulzneko/2019/07/06/summary-of-oss-friday-activities-in-2019-06/">OSS-Friday 活動 - 2019年6月まとめ</a></li><li><a href="/articles/lulzneko/2019/07/07/book-review-of-presentation-drill-4798157716/">「プレゼンドリル 伝えかた・話しかた」、勉強会、LT、イベント登壇のおともにしたいドリル</a></li><li><a href="/articles/lulzneko/2019/07/09/take-seminar-on-go-saas1-in-tokyo/">Go_SaaS 三種の神器オンボーディングセミナー 1 〜東京〜 参加レポート</a></li><li><a href="/articles/lulzneko/2019/07/14/temporarily-ignore-change-tracking-for-files-managed-by-git/">Git で管理しているファイルの変更追跡を一時的に無視したい</a></li><li><a href="/articles/lulzneko/2019/07/20/made-lt-about-Attendance-tec/">勤怠を自動化する技術 LT Nightで、Web-NFC の PWA について LT しました</a></li><li><a href="/articles/lulzneko/2019/07/26/made-presentation-about-serverless-at-cloudnative-days-2019/">CloudNative Days Tokyo 2019 にて「サーバレス・ネイティブ が お伝えする、フルサーバレス開発の魅力」の発表をしました</a></li><li><a href="/articles/lulzneko/2019/08/21/made-presentation-about-shifter-with-ssg-at-shiftup-vol5/">Shiftup! JP_Getshifter Vol5！ にて「Shifter ＋ SSG の世界」について発表をしました</a></li><li><a href="/articles/lulzneko/2019/08/23/always-put-my-address-in-cc-in-outlook/">Outlook で、自分のアドレスを常に Cc に入れる</a></li><li><a href="/articles/lulzneko/2019/09/23/deploy-to-netlify-via-cli-for-cicd/">Netlify へ CLI デプロイで、CI/CD する</a></li><li><a href="/articles/lulzneko/2019/10/07/ideal-as-a-mock-server-of-webapi-jsonboxio/">Web API のモックサーバーとしても活躍、jsonbox.io</a></li><li><a href="/articles/lulzneko/2019/12/24/first-website-with-shifter-webhooks-and-gridsome-on-netlify/">Shifter Webhooks と Gridsome で作る、最初のウェブサイト on Netlify</a></li></ul><p>去年は６本だったので大幅に増えましたが、４月～６月の間<a href="https://twitter.com/kakakakakku" target="_blank" rel="noopener">カック@技術ブロガー（@kakakakakku）さん</a>に、ブログメンターへついていただいて３ヶ月間で 36本。つまり自力の９ヶ月では 25本でした。メンタリング前の 14本はよいとして、後半の６ヶ月で 11本はまずい。メンタリング前よりペースが落ちてる。。。</p><p>ちょうどそのころから、発表を月に２回したり、アプリ作りを伴う LT、Closed イベントへの対応、新規プロジェクトへの参画に、月３本の発表とかなり無茶なスケジュールを詰めてしまいブログに使う時間を次の発表準備に当ててしまったことが敗因です。発表直前まで資料に手入れするタイプなので、発表が続くとなおのこと発表資料へ注力。通常ブログはまだしも、発表しましたブログでサマリーを入れてないのはよくなかった。これは反省点で、来年はバランスをとって活動できるようにしたいです。</p><p>発表とブログの両輪があってこそ、技術やナレッジをしっかり伝えることができると思えばこそ、頑張りどころだと。</p><h2 id="プルリク-17本"><a href="#プルリク-17本" class="headerlink" title="プルリク 17本"></a>プルリク 17本</h2><ul><li><a href="https://github.com/grant-zietsman/validate-typescript/pull/7" target="_blank" rel="noopener">grant-zietsman/validate-typescript- Fix error when this npm module user installs</a></li><li><a href="https://github.com/tea3/hexo-related-popular-posts/pull/19" target="_blank" rel="noopener">tea3/hexo-related-popular-posts - Support sub-path URL configuration with popular posts feature</a></li><li><a href="https://github.com/sfarthin/ga-analytics/pull/2" target="_blank" rel="noopener">sfarthin/ga-analytics - Add a callback function to support Node.js v8 or later</a></li><li><a href="https://github.com/hexojs/hexo-theme-landscape/pull/134" target="_blank" rel="noopener">hexojs/hexo-theme-landscape - Include article title in tweets text when sharing with Twitter</a></li><li><a href="https://github.com/gridsome/gridsome-starter-default/pull/10" target="_blank" rel="noopener">gridsome/gridsome-starter-default - Set default values in site description for more SEO friendly</a></li><li><a href="https://github.com/hexojs/hexo-theme-landscape/pull/136" target="_blank" rel="noopener">hexojs/hexo-theme-landscape - Remove Google+ shared link button because the Google+ service has ended</a></li><li><a href="https://github.com/zefman/gridsome-source-instagram/pull/1" target="_blank" rel="noopener">zefman/gridsome-source-instagram - Fix typo in the usage configuration example</a></li><li><a href="https://github.com/hexojs/hexo-theme-landscape/pull/137" target="_blank" rel="noopener">hexojs/hexo-theme-landscape - Remove Google+ OGP header tags because the Google+ service has ended</a></li><li><a href="https://github.com/hexojs/hexo-theme-landscape/pull/138" target="_blank" rel="noopener">hexojs/hexo-theme-landscape - Set the banner image path as a configuration file (resolve 06)</a></li><li><a href="https://github.com/Readify/httpstatus/pull/63" target="_blank" rel="noopener">Readify/httpstatus - Respond object literals to JSON</a></li><li><a href="https://github.com/Readify/httpstatus/pull/64" target="_blank" rel="noopener">Readify/httpstatus - Add 103 Early Hints [RFC8297]</a></li><li><a href="https://github.com/Readify/httpstatus/pull/65" target="_blank" rel="noopener">Readify/httpstatus - Add 207 Multi-Status  [RFC4918]</a></li><li><a href="https://github.com/Readify/httpstatus/pull/66" target="_blank" rel="noopener">Readify/httpstatus - Add 423 Locked [RFC4918]</a></li><li><a href="https://github.com/Readify/httpstatus/pull/67" target="_blank" rel="noopener">Readify/httpstatus - Add 506 Variant Also Negotiates [RFC2295]</a></li><li><a href="https://github.com/hexojs/hexo-browsersync/pull/34" target="_blank" rel="noopener">hexojs/hexo-browsersync - Introduce an option to change tag to inject Browsersync snippets</a></li><li><a href="https://github.com/hexojs/hexo-generator-category/pull/23" target="_blank" rel="noopener">hexojs/hexo-generator-category - Add the “order_by” option (resolve #6)</a></li><li><a href="https://github.com/hexojs/hexo-generator-tag/pull/22" target="_blank" rel="noopener">hexojs/hexo-generator-tag - Add the “order_by” option (resolve #5)</a></li></ul><p>今年は、はじめてプルリクを出すことに挑戦し 17本出すことができました。<br>もう少し貢献したかったですが、なかなかプルリクを送れそうなシーンを見つけられず難しかったです。引き続き貢献できる機会を狙ってプルリクを送りたいと思います。</p><h2 id="アプリ開発-４本"><a href="#アプリ開発-４本" class="headerlink" title="アプリ開発 ４本"></a>アプリ開発 ４本</h2><table><thead><tr><th align="left">アプリ名</th><th align="left">イベント</th><th align="left">関連資料</th></tr></thead><tbody><tr><td align="left">ミツカルヘアサロン💇</td><td align="left">CTO vs Hackers ハッカソン</td><td align="left"><a href="https://riotz.works/articles/lulzneko/2019/03/10/cto-vs-hackers-hackathon-chronicle/">ブログ</a>/<a href="https://riotz.works/slides/2019-cto-vs-hackers-hackathon/">スライド</a></td></tr><tr><td align="left">📰NEWʑ Link</td><td align="left">SPAJAM 2019 東京A予選</td><td align="left"><a href="https://riotz.works/articles/lulzneko/2019/05/20/spajam-2019-tokyo-a-pre-hackathon-chronicle/">ブログ</a>/<a href="https://riotz.works/slides/2019-spajam-qualification/">スライド</a></td></tr><tr><td align="left">空鏡</td><td align="left">ブログメンティー</td><td align="left"><a href="https://github.com/riotz-works/sora-kagami" target="_blank" rel="noopener">ソース</a>/<a href="https://riotz.works/articles/lulzneko/2019/06/24/serverless-weather-report-slack-bot-sora-kagami/">ブログ</a></td></tr><tr><td align="left">ツカエタルヒの記録</td><td align="left">勤怠を自動化する技術 LT Night</td><td align="left"><a href="https://riotz.works/articles/lulzneko/2019/07/20/made-lt-about-Attendance-tec/">ブログ</a>/<a href="https://riotz.works/slides/2019-attendance-tech-lt/">スライド</a></td></tr></tbody></table><p>アプリ作りの機会を得られたものの、リファクタリングや最終化ができてなくて「空鏡」以外は公開できてないのが残念なところ。<br>ちゃんと時間を作って仕上げたいです。</p><h2 id="ハッカソン-２回"><a href="#ハッカソン-２回" class="headerlink" title="ハッカソン ２回"></a>ハッカソン ２回</h2><p>ハッカソンは開発者にとっての総合競技みたいなイメージを持っており、とても好きです。<br>今年は「CTO vs Hackers ハッカソン」と「SPAJAM 2019 東京A予選」の２つに参加しました。</p><p>「CTO vs Hackers ハッカソン」はアイデアソン含めて６時間と短時間のイベントでした。それも現場でチーム編成からなので、かなり緊張と不安がよぎるイベントでしたが、幸いにも「個人が提案する時代に向けたアプリ」という方向性でチームの思いが一致、そして深い理解と共感ができたことから良い開発が行えました。技術スタックも分散しかなりツイていたと思います。順位をつけるイベントではなかったので賞などはありませんでしたが、とても楽しめるハッカソンでした。</p><p>「SPAJAM 2019 東京A予選」は、２度目の SPAJAM 挑戦です。<br>チーム作りに時間をかけられず締め切り当日に Riotz 仲間の<a href="https://twitter.com/lopburny" target="_blank" rel="noopener">lopburny (ロップバーニー)（@lopburny）</a>と相談して２人で出ました。さすがに２人は無謀と思っていましたが、チャンスを前に挑戦しないことは選べずハッカソンへ臨むことに。結果は残せませんでしたが、限られた時間の中で全てを出し切れたと思います。</p><p>なお徹夜ハッカソンのお供は<a href="https://lean-agile.fm/episode/22" target="_blank" rel="noopener">#22 「Trello があるので眠れない」 | #omoiyarifm</a>。意識を高く保つには良く(それ、別の意識や)、３回ぐらい聞いてましたｗ</p><h2 id="Special-Topics-２つ"><a href="#Special-Topics-２つ" class="headerlink" title="Special Topics ２つ"></a>Special Topics ２つ</h2><h3 id="カック-技術ブロガー（-kakakakakku）さん-の、ブログメンター"><a href="#カック-技術ブロガー（-kakakakakku）さん-の、ブログメンター" class="headerlink" title="カック@技術ブロガー（@kakakakakku）さん の、ブログメンター"></a><a href="https://twitter.com/kakakakakku" target="_blank" rel="noopener">カック@技術ブロガー（@kakakakakku）さん</a>の、ブログメンター</h3><p>４月～６月の３ヶ月間ブログのメンターについていただきました。<br>カックさんの資料やブログメンターの話はよく Twitter で見かけていて、機会があったらうけて見たいと思っていたのでスゴクありがたいです。</p><p>ブログのテーマだしから始まり、独自のブログシステムを使っていることからの改修点、ちょっと自分が情けないところとしてはタイポの指摘、記事の内容に関するレビューと方向性の指摘、そして何より技術者としての活動の幅を広げる話などをしてくれます。この期間で多くの勉強をさせていただき、ブログを書くことへの楽しさを知ることができたと思います。</p><p>一方でカックさんが一番おっしゃっていた「継続性」について、メンター終了後に続いてないのは大変申し訳なく思うとともに、自分を情けなくも思います。新しいことを始めたり、集中して取り組むことが得意なものの、継続は苦手。ブログメンティーの振り返り記事は書いていたのに、卒業を書いていなかったのは、その不安があったからです(あと直後の３発表＋アプリ１本のスケジュールは入ってたから限界が見えてたのもある)。熱いうちに打てとも言いますが、熱いまま書いても性根は変わらないのであえて年末振り返りまで待つことにしましたが案の定。</p><p>ブログの項でも書きましたがスケジュールの不備が大きかったと思う(思いたい)ので、来年はバランスをとってブロギングをしっかりしていきたいです。</p><h3 id="Serverless-Operations-horike-takahiro（-horike37）さん-の、共創シフト"><a href="#Serverless-Operations-horike-takahiro（-horike37）さん-の、共創シフト" class="headerlink" title="Serverless Operations horike takahiro（@horike37）さん の、共創シフト"></a>Serverless Operations<a href="https://twitter.com/horike37" target="_blank" rel="noopener">horike takahiro（@horike37）さん</a>の、共創シフト</h3><p>サーバーレスコミュニティのオーガナイザーを務める<a href="https://twitter.com/horike37" target="_blank" rel="noopener">horike takahiro（@horike37）さん</a>共創型開発へ参画させていただくことになりました。<br><img src="/articles/assets/lulzneko/review/01-001.png" alt=""></p><p><a href="https://twitter.com/horike37" target="_blank" rel="noopener">horike takahiro（@horike37）さん</a>資料</p><script async class="speakerdeck-embed" data-id="66281b79dd0841318dc70cd64ffc5892" data-ratio="2.4" src="//speakerdeck.com/assets/embed.js"></script><p>常々サーバーレスで開発するというのは開発サイクルを軽量に回すことができる、また H/W, OS, M/W などの運用面を最小化して開発に注力できることにメリットがあると感じていました。極端な話、開発面をサポートしアプリの仕様把握やメンテができるところまで一緒に行くことができたら、後はほぼ自分たちでできるのだろうなと。そうしたことを考えている中で私にできることは何かなと考えていました。</p><p>そんな折にサーバーレスをフルに活かす開発の手法としての共創型開発に興味と共感をもち、是非にと参加させていただきました。<br>こちらについては、どこかで発表や記事にしたいと思います。<br>※ サーバーレス開発支援の導入に興味ある方は Serverless Operations<a href="https://twitter.com/horike37" target="_blank" rel="noopener">horike takahiro（@horike37）</a>へご連絡いただくか、私も取り次ぎしますので気軽にご相談ください。</p><hr><p>Riotz.works が発足して、ほぼ３年。</p><p>１つのカンファレンスで発表することができて技術者としての活動の楽しさを感じ、そして活動を広げきました。<br>今年は、それが大きな活動につながった年だと言えるでしょう。</p><p>そこには多くの方々のつながりがあり、発表を聞いてくださり、ブログを読んでくださった皆さまのおかげです。<br>ありがとうございます！</p><p>引き続き、多くの技術やナレッジの情報を発信してまいります。<br>良かったところを伸ばし、反省点を見直して次の年へつなげられるよう頑張ります。</p><p>今後とも、よろしくお願いいたします。<br>よいお年を。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年最後のポスト、１年間の活動を振り返ります。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lulzneko/review.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;サマリー&quot;&gt;&lt;a href=&quot;#サマリー&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="ふりかえり" scheme="https://riotz.works/articles/categories/%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>Shifter Webhooks と Gridsome で作る、最初のウェブサイト on Netlify</title>
    <link href="https://riotz.works/articles/lulzneko/2019/12/24/first-website-with-shifter-webhooks-and-gridsome-on-netlify/"/>
    <id>https://riotz.works/articles/lulzneko/2019/12/24/first-website-with-shifter-webhooks-and-gridsome-on-netlify/</id>
    <published>2019-12-23T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>本記事は<a href="https://qiita.com/advent-calendar/2019/getshifter" target="_blank" rel="noopener">Shifter Advent Calendar 2019</a>の 24日目です。</p><p><img src="/articles/assets/lulzneko/seminar/shifter/shifter.png" alt=""></p><p>昨日は<a href="https://twitter.com/tekapo" target="_blank" rel="noopener">Tai / JOTAKI Taisuke 🍺（@tekapo）さん</a>の<a href="https://wp.tekapo.com/2019/12/23/wordpress-theme-development-on-shifter-local/" target="_blank" rel="noopener">Shifter-LocalでWordPressテーマ開発環境を作る – わーどぷれすっ!</a>です。Shifter をローカルで動かして開発する方法が紹介されてます。スゴイ！</p><p>さぁ、今日は私の出番。アドベントカレンダーのネタや！と思っていたのですが、諸般の事情により時間切れて<a href="https://twitter.com/toro_unit" target="_blank" rel="noopener">Toro_Unit（山の上のとろゆに）（@Toro_Unit）さん</a>公開の Shifter Webhooks + Gridsome にマル乗っかりさせて頂いた記事になります。(すみません💦)</p><h2 id="Shifter-と-Netlify-デプロイ連携について"><a href="#Shifter-と-Netlify-デプロイ連携について" class="headerlink" title="Shifter と Netlify デプロイ連携について"></a>Shifter と Netlify デプロイ連携について</h2><p>2019年4月3日に開催された<a href="https://eventregist.com/e/xiza3ieCWYFc?lang=ja_JP" target="_blank" rel="noopener">Shiftup! JP_Getshifter Vol3！はじめてのスタティックサイトジェネレーター</a>のイベントへ参加した際に、<a href="/articles/lulzneko/2019/04/06/think-of-shifters-headlesscms-nize-on-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ 振り返り、Shifterのヘッドレス CMS 化に思いを馳せる</a>という記事を書きました。</p><p>それから１ヶ月ちょっと、何と公式で「<a href="https://www.digitalcube.jp/shifter/4434/" target="_blank" rel="noopener">Shifter Webhooksで Netlify上のGatsbyサイトにWordPressコンテンツをインポート可能になりました</a>」という神対応がありました。</p><p>詳しくは公式のブログを読んでいただくとして、概要としてしては以下になります。<br>GatsbyJS で作ったプロジェクトを、あらかじめ Netlify へデプロイしておきます。そして Shifter Webhooks に Netlify の BuilhHook を登録します。Shifter から<code>Send webhook</code>することで Netlify でビルド＆デプロイされます。<br><img src="/articles/assets/lulzneko/seminar/shifter/05-03.png" alt=""></p><h2 id="Shifter-Gridsome-で-Netlify-へ、デプロイ"><a href="#Shifter-Gridsome-で-Netlify-へ、デプロイ" class="headerlink" title="Shifter + Gridsome で Netlify へ、デプロイ"></a>Shifter + Gridsome で Netlify へ、デプロイ</h2><p>Shifter 公式の機能としては「Shifter から Webhook を呼び出す」ものになります。GatsbyJS のコードや方法はサンプルとしての位置づけになります。そう<a href="https://gridsome.org/" target="_blank" rel="noopener">Gridsome</a>推しの私としては、やはり Shifter + Gridsome で実現したいところ。</p><p>さっそく実装を検討しようとした(どころか時間切れな)ところ、<a href="https://twitter.com/toro_unit" target="_blank" rel="noopener">Toro_Unit（山の上のとろゆに）（@Toro_Unit）さん</a>が素晴らしいプロダクトを公開してくださりました！ Shifter 公式の GatsbyJS で解説されていた話を Gridsome 版にポーティングしたものです！！</p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://github.com/torounit/gridsome-shifter" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/h5tUGKQ"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>こちらを使うと、いい感じです！<br>以上、私のアドベントカレンダー終了です 😇</p><h2 id="torounit-gridsome-shifter-を使って-Shifter-Gridsome-on-Netlify"><a href="#torounit-gridsome-shifter-を使って-Shifter-Gridsome-on-Netlify" class="headerlink" title="torounit/gridsome-shifter を使って Shifter + Gridsome on Netlify"></a>torounit/gridsome-shifter を使って Shifter + Gridsome on Netlify</h2><p>とはいえ、さすがに 24日、ここで引くわけにはいかないので、<a href="https://github.com/torounit/gridsome-shifter" target="_blank" rel="noopener">torounit/gridsome-shifter</a>を使わせていただいて、Shifter + Gridsome on Netlify をやってみます。<br>※ あらかじめ Shifter と GitHub、Netlify へサインアップし、ログインしておきます</p><h3 id="Shifter-のサイト作成"><a href="#Shifter-のサイト作成" class="headerlink" title="Shifter のサイト作成"></a>Shifter のサイト作成</h3><p>Shifter の Create new site<a href="https://go.getshifter.io/admin/sites/create" target="_blank" rel="noopener">https://go.getshifter.io/admin/sites/create</a>へアクセスします。<br>今回は Webhooks を使いますので [Tier 2] の [Select] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-008.png" alt=""></p><p>注文の確認とサイト名の確認が表示されるので<code>Tier 2</code>であることを確認し、[Site name] を入力します。サイト名が決まったら [Create] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-009.png" alt=""></p><p>Shifter で、サイトが立ち上がりました！<br>[CloudFront Domain] をひかえておきます。<br><img src="/articles/assets/lulzneko/develop/shifter/01-010.png" alt=""></p><p>続いて [Start WordPress] & [Dashbord] をクリックして記事を投入します。Webhooks を使うために以下の３点を作成しておきます。</p><ul><li>最低1つ以上の投稿があること（タグ設定済みであること）</li><li>最低1つ以上の固定ページがあること</li><li>現時点では投稿に画像を入れておくこと (<a href="https://github.com/gridsome/gridsome-starter-wordpress/issues/15" target="_blank" rel="noopener">sourceUrl error · Issue #15 · gridsome/gridsome-starter-wordpress</a>)<br><img src="/articles/assets/lulzneko/develop/shifter/01-014.png" alt=""></li></ul><h3 id="GitHub-プロジェクトの作成"><a href="#GitHub-プロジェクトの作成" class="headerlink" title="GitHub プロジェクトの作成"></a>GitHub プロジェクトの作成</h3><p><a href="https://github.com/torounit/gridsome-shifter" target="_blank" rel="noopener">https://github.com/torounit/gridsome-shifter</a>へアクセスします。<br>画面右上の [Fork] ボタンをクリックして、自分のアカウントへフォークします。<br>※ 私の環境だと [Deploy to netlify] ボタンをうまく動作させられなかったのですが、こちらを使うともっと簡単のはず<br><img src="/articles/assets/lulzneko/develop/shifter/01-001.png" alt=""></p><p>また、今回のタイミングが悪かっただけと思いますが以下のエラーが発生したため Gridsome のバージョンをあげました。変更する場合は<code>package.json</code>を直接編集で問題ありません。今回は<code>"gridsome": "^0.7.12"</code>としました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">12:09:14 AM: Error:</span><br><span class="line">12:09:14 AM: Vue packages version mismatch:</span><br><span class="line">12:09:14 AM: - vue@2.6.10</span><br><span class="line">12:09:14 AM: - vue-server-renderer@2.6.11</span><br><span class="line">12:09:14 AM: This may cause things to work incorrectly. Make sure to use the same version for both.</span><br></pre></td></tr></table></figure><h3 id="Netlify-でサイト構築"><a href="#Netlify-でサイト構築" class="headerlink" title="Netlify でサイト構築"></a>Netlify でサイト構築</h3><p><a href="https://app.netlify.com/" target="_blank" rel="noopener">https://app.netlify.com/</a>へアクセスし、[New site from Git] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-015.png" alt=""></p><p>[GitHub] をクリックします。<br>※ はじめての Netlify/GitHub 連携になる場合は GitHub のサイトが開き Netlify への認可を求められるので [Authorize netlify] します<br><img src="/articles/assets/lulzneko/develop/shifter/01-016.png" alt=""></p><p>リポジトリの一覧が表示されるので、先ほど Fork したリポジトリを選択します。<br><img src="/articles/assets/lulzneko/develop/shifter/01-017.png" alt=""></p><p>設定項目は、とくに変更する必要がないので [Deploy site] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-018.png" alt=""></p><p>ビルドが失敗しますが気にせず [Site settings] をクリックします。<br>※ この段階ではビルドの Webhook で起動していないためです<br><img src="/articles/assets/lulzneko/develop/shifter/01-004.png" alt=""></p><p>画面左のメニューから [Build & deploy] を選択し、下へスクロール Build hooks から [Add build hook] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-005.png" alt=""></p><p>Build hooks の設定が表示されます。<br>[Build hook name] 管理しやすい名称を入力し [Save] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-006.png" alt=""></p><p>ビルド用の Webhook URL が生成されるのでひかえておきます。<br><img src="/articles/assets/lulzneko/develop/shifter/01-007.png" alt=""></p><h3 id="Shifter-Webhooks-を設定！"><a href="#Shifter-Webhooks-を設定！" class="headerlink" title="Shifter Webhooks を設定！"></a>Shifter Webhooks を設定！</h3><p>お待ちかねの Shifter Webhooks を設定します。</p><p>Shifter の WordPress ダッシュボードの左メニュー下の [Shifter] から [Webhook] を選択します。<br>[Webhook URL] に、先ほど取得した Netlify のビルド Webhook URL を入力し [Save Changes] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-012.png" alt=""></p><p>画面上部のメニューバーから [Shifter] - [Send webhook] をクリックします。<br><img src="/articles/assets/lulzneko/develop/shifter/01-013.png" alt=""></p><p>Netlify へ戻るとサイトが公開されていることが確認でき、サイトの URL をクリックすると Shifter で投稿した内容が表示されます。<br>(画像とかが抜けているのは Publish したけど Generate してないからかもです。これから確認。)<br><img src="/articles/assets/lulzneko/develop/shifter/01-019.png" alt=""><br><img src="/articles/assets/lulzneko/develop/shifter/01-020.png" alt=""><br>※ メンテナンスのため、画像 URL のサイトはアクセスできません。</p><hr><p>まだ最初の連携なので CSS どころか画像も表示できてない状態ですが、これは連携や Gridsome での開発を楽しめるところ。まずは Shifter で記事を投稿し、それが Gridsome を通して Netlify へ公開できるところが素晴らしいです。</p><p>そして何よりも、素晴らしいプロジェクトを公開してくださった<a href="https://twitter.com/toro_unit" target="_blank" rel="noopener">Toro_Unit（山の上のとろゆに）（@Toro_Unit）さん</a>ありがとうございます！！</p><p>明日は〆で<a href="https://twitter.com/seijiakatsuka" target="_blank" rel="noopener">Seiji Akatsuka（@seijiakatsuka）さん</a>の「来年の抱負？」です。楽しみですね♪</p><p>では、ハッピーホリデー！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本記事は&lt;a href=&quot;https://qiita.com/advent-calendar/2019/getshifter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shifter Advent Calendar 2019&lt;/a&gt;の 24日目です。&lt;
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="JAMstack" scheme="https://riotz.works/articles/tags/JAMstack/"/>
    
      <category term="Gridsome" scheme="https://riotz.works/articles/tags/Gridsome/"/>
    
      <category term="Netlify" scheme="https://riotz.works/articles/tags/Netlify/"/>
    
      <category term="PWA" scheme="https://riotz.works/articles/tags/PWA/"/>
    
      <category term="Shifter" scheme="https://riotz.works/articles/tags/Shifter/"/>
    
      <category term="WordPress" scheme="https://riotz.works/articles/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>Web API のモックサーバーとしても活躍、jsonbox.io</title>
    <link href="https://riotz.works/articles/lulzneko/2019/10/07/ideal-as-a-mock-server-of-webapi-jsonboxio/"/>
    <id>https://riotz.works/articles/lulzneko/2019/10/07/ideal-as-a-mock-server-of-webapi-jsonboxio/</id>
    <published>2019-10-06T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>jsonbox.io という HTTP ベースで JSON ストレージを扱えるフリーのサービスがあります。<br>公式ではスモールプロジェクトや、プロトタイピング、ハッカソンなどで最適とありますが、もうひとつ JAMstack 開発時の Web API のモックとしても活用できるのでご紹介。</p><p><img src="/articles/assets/lulzneko/develop/develop.jpg" alt=""></p><p>JAMstack でフロント開発をしている際は、フロント担当と Web API 担当に分かれて開発をします。もちろん双方を同時に担当してもよいのですが、多くのケースでは担当が分かれることでしょう。</p><p>そうなるとフロントエンドから呼び出したい Web API はフロントエンド側でモック実装するなり、モックサーバーを用意するなどの必要があります。モック実装すると本質的でないコードをソース管理することになりますし、モックサーバーを用意するには手間が発生します。</p><p>そんな時に<a href="https://jsonbox.io/" target="_blank" rel="noopener">jsonbox.io</a>を使うと、手軽な Web API モックサーバーとして利用することもできます。</p><h2 id="jsonbox-io-の利用方法"><a href="#jsonbox-io-の利用方法" class="headerlink" title="jsonbox.io の利用方法"></a>jsonbox.io の利用方法</h2><p>まず jsonbox.io のトップページ、<a href="https://jsonbox.io/" target="_blank" rel="noopener">https://jsonbox.io</a>へブラウザでアクセスします。<br>するとトップページに<code>https://jsonbox.io/box_b68kwaff800864XXXX</code>のような URL が表示されます。これはリロードするたびに毎回変わります。これが JSON ストレージの URL になりますので控えておきます。<br><img src="/articles/assets/lulzneko/develop/jsonboxio/01-001.png" alt=""></p><p>この<code>box_b68kwaff800864XXXX</code>の文字列は<code>BOX_ID</code>と呼ばれ、JSON ストレージの ID です。jsonbox.io のトップページで生成されたものを使うほか、20文字以上の英数字とアンダーバー(<code>_</code>)を使って自分で生成することもできます。事前に設定する必要はなくレコードを作るときに指定したものが、そのまま使われます。</p><p>ここからは<a href="https://github.com/vasanthv/jsonbox/blob/master/README.md" target="_blank" rel="noopener">jsonbox/README.md</a>をベースに紹介します。</p><h3 id="レコードの作成"><a href="#レコードの作成" class="headerlink" title="レコードの作成"></a>レコードの作成</h3><p>HTTP POST で作成したいレコードの JSON をリクエストします。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST 'https://jsonbox.io/demobox_6d9e326c183fde7b' \</span><br><span class="line">    -H 'content-type: application/json' \</span><br><span class="line">    -d '{"name": "Jon Snow", "age": 25}'</span><br></pre></td></tr></table></figure><p>以下のようなレスポンスが返り<code>_id</code>と<code>_createdOn</code>が自動生成されていることがわかります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">"_id"</span>:<span class="string">"5d776a25fd6d3d6cb1d45c51"</span>,<span class="attr">"name"</span>:<span class="string">"Jon Snow"</span>,<span class="attr">"age"</span>:<span class="number">25</span>,<span class="attr">"_createdOn"</span>:<span class="string">"2019-09-10T09:17:25.607Z"</span>}</span><br></pre></td></tr></table></figure><p>複数のレコード同時に作成するには<code>-d</code>で渡すデータを配列にします。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST 'https://jsonbox.io/demobox_6d9e326c183fde7b' \</span><br><span class="line">    -H 'content-type: application/json' \</span><br><span class="line">    -d '[{"name": "Daenerys Targaryen", "age": 25}, {"name": "Arya Stark", "age": 16}]'</span><br></pre></td></tr></table></figure><p>また URL を<code>jsonbox.io/${BOX_ID}/${COLLECTION}</code>のようにしてグループレコードも作れます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST 'https://jsonbox.io/demobox_6d9e326c183fde7b/users' \</span><br><span class="line">    -H 'content-type: application/json' \</span><br><span class="line">    -d '[{"name": "Daenerys Targaryen", "age": 25}, {"name": "Arya Stark", "age": 16}]'</span><br></pre></td></tr></table></figure><h3 id="レコードの取得"><a href="#レコードの取得" class="headerlink" title="レコードの取得"></a>レコードの取得</h3><p>HTTP GET リクエストでレコードが取得できます。pathname によって返る範囲が変わります。</p><p><code>BOX_ID</code>までの場合、グループレコードを含めた、全レコードが返ります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET 'https://jsonbox.io/demobox_6d9e326c183fde7b'</span><br></pre></td></tr></table></figure><p><code>BOX_ID</code>に加え<code>COLLECTION</code>も指定することで、その<code>COLLECTION</code>に含まれるグループレコードが返ります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET 'https://jsonbox.io/demobox_6d9e326c183fde7b/users'</span><br></pre></td></tr></table></figure><p><code>BOX_ID</code>に加え<code>RECORD_ID</code>、レコードを作成したとき or リスト取得した際に返ってきた<code>_id</code>の値を指定すると、その ID の１レコードが返ります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET 'https://jsonbox.io/demobox_6d9e326c183fde7b/5d776a25fd6d3d6cb1d45c51'</span><br></pre></td></tr></table></figure><p>またソートやリミット、クエリーなど柔軟な取得方法も備えています。今回は JSON モックサーバーとしての用途を想定していますので簡単な CRUD 処理ができれば十分ですが、アプリなどで実際に使う場合には必要でしょう。詳しくは<a href="https://github.com/vasanthv/jsonbox/blob/master/README.md#read" target="_blank" rel="noopener">Read - jsonbox/README.md</a>をご参照ください。</p><h3 id="レコードの更新"><a href="#レコードの更新" class="headerlink" title="レコードの更新"></a>レコードの更新</h3><p>HTTP PUT リクエストを<code>RECORD_ID</code>まで指定した URL でレコードを更新します。<br>PATCH と、バルク更新はサポートされていません。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT 'https://jsonbox.io/demobox_6d9e326c183fde7b/5d776b75fd6d3d6cb1d45c53' \</span><br><span class="line">    -H 'content-type: application/json' \</span><br><span class="line">    -d '{"name": "Arya Stark", "age": 18}'</span><br></pre></td></tr></table></figure><h3 id="レコードの削除"><a href="#レコードの削除" class="headerlink" title="レコードの削除"></a>レコードの削除</h3><p>HTTP DELETE リクエストを<code>RECORD_ID</code>まで指定した URL でレコードを更新します。<br>またクエリーを使用して複数のレコード削除も可能です。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE 'https://jsonbox.io/demobox_6d9e326c183fde7b/5d776b75fd6d3d6cb1d45c53'</span><br></pre></td></tr></table></figure><h2 id="制約"><a href="#制約" class="headerlink" title="制約"></a>制約</h2><p>フリーで利用できますが、不正利用や乱用を防ぐ(= avoid abuse)ために以下の制限を課しているとのことです。</p><ul><li>リクエストのボディは 10KB まで</li><li>一度に扱えるレコードは 1,000件まで</li><li>レコード数は 5,000件までを目安に</li></ul><p>３つ目のレコード数ほか、高負荷をかけないなどマナーを守りたいですね。これだけの素晴らしいサービスを無償で提供してくださっており、また “小規模向けなのでフリーとしています” とのことです。</p><p>原文は以下。</p><blockquote><p>There is no limit on the number of records you store in a box, but please don’t abuse the API by storing large datasets of more than 5000 records. This is meant for small projects and that’s why it is offered FREE of cost. -<a href="https://github.com/vasanthv/jsonbox/blob/master/README.md#limitations" target="_blank" rel="noopener">Limitations</a></p></blockquote><hr><p>単純な CRUD 処理は REST の Web API として簡単に操作できます。<br>グループレコードの機能があるので、単純な JSON モックサーバーとしては十分でしょう。</p><p>またクエリーや<code>skip</code>と<code>limit</code>を使ったページネーション等の高度な機能もあるので、公式で謳っている通りスモールプロジェクトや、プロトタイピング、ハッカソンでも十分な能力を発揮してくれそうです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jsonbox.io という HTTP ベースで JSON ストレージを扱えるフリーのサービスがあります。&lt;br&gt;公式ではスモールプロジェクトや、プロトタイピング、ハッカソンなどで最適とありますが、もうひとつ JAMstack 開発時の Web API のモックとしても活用
      
    
    </summary>
    
    
      <category term="開発" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA/"/>
    
    
      <category term="JAMstack" scheme="https://riotz.works/articles/tags/JAMstack/"/>
    
  </entry>
  
  <entry>
    <title>ブログメンタリングを受けて学んだことと振り返り</title>
    <link href="https://riotz.works/articles/lopburny/2019/10/07/review-my-blog-mentoring-experience/"/>
    <id>https://riotz.works/articles/lopburny/2019/10/07/review-my-blog-mentoring-experience/</id>
    <published>2019-10-06T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>この度、カックさん（<a href="https://twitter.com/kakakakakku" target="_blank" rel="noopener">@kakakakakku</a>）のブログメンタリングを受け、３ヶ月間メンティーとして活動させていただき、卒業しました。この記事ではメンタリングの振り返りと学びについて共有したいと思います。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_15_thumbnail.jpg" alt=""></p><script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script><p>ブログメンタリングについて知りたい方は、是非こちらの記事を一度読んでください。<br><br></p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fkakakakakku.hatenablog.com%2Fentry%2F2019%2F06%2F24%2F070816" style="border:0;width:100%;height:190px" allowfullscreen scrolling="no"></iframe><p>また、私がカックさんを知るきっかけになった「Trello があるので眠れない」の Podcast も合わせて聞いてみてください。私は、ある日徹夜作業で疲れ果てていた時に、この Podcast を聞いて元気づけられ、またブログメンタリングに申し込む決心をするようになりました。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://lean-agile.fm/episode/22" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/QO3yCGy"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="なぜブログメンタリングを受けようと思ったか"><a href="#なぜブログメンタリングを受けようと思ったか" class="headerlink" title="なぜブログメンタリングを受けようと思ったか"></a>なぜブログメンタリングを受けようと思ったか</h2><p>私は仕事でのコミュニケーションにおいて何かを主張したり説明することが得意ではありませんでした。しかしあることをきっかけに「人に何かを伝える、教える」ことに興味を持つようになり、そこで、先ずは自分が持っている知識を人にできるだけ分かりやすく伝える姿勢とスキルを持つべきと考え、ブログメンタリングに応募しました。</p><h2 id="ブログメンタリングで学んだこと"><a href="#ブログメンタリングで学んだこと" class="headerlink" title="ブログメンタリングで学んだこと"></a>ブログメンタリングで学んだこと</h2><p>技術ブログを書く・運用していく上で役に立つ知識とノウハウは、<code>#ブログメンタリング</code>という Twitter ハッシュタグでカックさんが投稿してくれるので、検索して知ることができます。一方、実際にメンタリングを受けてみると、さらに一歩踏み込んだ経験と気づきがあったので、個人的に学びが多かった点について共有してみたいと思います。</p><h3 id="自分をマネージメントする"><a href="#自分をマネージメントする" class="headerlink" title="自分をマネージメントする"></a>自分をマネージメントする</h3><p>メンタリング中はブログの更新本数のノルマが課せられますが、それに加えて公開する時期（平日／週末）や記事のジャンル（小ネタ／書評など）についても目標を設定してチャレンジすることになります。</p><p>ここで一つ感じたのは、例えば「平日の方が多く読まれるので、週の早めにブログを更新すると良い」ということを知りながらも、そのように実践して結果を残すためには自分をマネージメントする必要があることです。時間の使い方をきちんと工夫した上で、計画を立ててコツコツ行動していくことが重要です。</p><p>すると、更新本数のノルマをクリアするために、週の初め or 終わりに自分の予定をオーガナイズする作業が欠かせません。「ブログ」を生活の中心に置くことで、仕事もプライベートもより計画的になります👍</p><h3 id="ブロガー同士の繋がりも重要"><a href="#ブロガー同士の繋がりも重要" class="headerlink" title="ブロガー同士の繋がりも重要"></a>ブロガー同士の繋がりも重要</h3><p>個人的には多く反省点が残る点ですが、メンティー同士または同じブロガー同士で記事を共有したり感想を書いて伝えることも重要です。キーワード検索による流入はあれど、SNS で拡散したりブックマークされたりと、ブログへのタッチポイントは他にも多くあります。他の人に共有してもらったりコメントをもらうことで、記事を書くモチベーションも上がります。つまり、人にしてほしいことはまず自分からしてみることです🙌</p><h3 id="すでに知っている知識でも記事にしてアウトプットすること"><a href="#すでに知っている知識でも記事にしてアウトプットすること" class="headerlink" title="すでに知っている知識でも記事にしてアウトプットすること"></a>すでに知っている知識でも記事にしてアウトプットすること</h3><p>ブログを更新するために、毎回新しい技術や知識をインプットすることは大変です。もちろん必要なことではありますが、余裕を持ってブログを書いていけるようになるまでは、新しいことやネタのユニークさにこだわるよりも、すでに知っている知識を継続的にまとめていく方が良いかもしれません。</p><p>一度記事にしておくと、以降、その内容についてとっさに誰かに聞かれても、すぐに回答が出てくるようになります。また自分の記事を引用して説明できるのも面白いですね。理解が曖昧だったところを勉強し直せるチャンスでもあります💪</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>メンタリング期間中にリモートワークをすることになり、ほぼ活字のみで仕事のコミュニケーションを取るようになりましたが、週１でブログを書いていたおかげで、技術的なコンテキストでもさほどストレスなく書けている自分に驚いています。まだまだなので、上手く書けているかどうかは別ですが、文章を書くことへの抵抗や不安はかなり軽減されたことを実感しています。</p><h3 id="メンタリング期間中に書いた記事の数"><a href="#メンタリング期間中に書いた記事の数" class="headerlink" title="メンタリング期間中に書いた記事の数"></a>メンタリング期間中に書いた記事の数</h3><br><ul><li>13週間のメンタリング期間中、14 記事を更新</li><li>基本的に週1のノルマを継続、1度だけ週2のノルマにチャンレンジ</li></ul><h3 id="週間PV数の推移"><a href="#週間PV数の推移" class="headerlink" title="週間PV数の推移"></a>週間PV数の推移</h3><p>※ lopburny が書いた記事のページのみ集計<br><canvas id="lopburny-article-15" width="400" height="100"></canvas></p><script>new Chart(document.getElementById("lopburny-article-15").getContext("2d"),{type:"line",data:{labels:["１週目","２週目","３週目","４週目","５週目","６週目","７週目","８週目","９週目","10週目","11週目","12週目","13週目"],datasets:[{label:"週間PV数",data:[25,44,21,61,52,63,51,119,173,203,213,341,382],backgroundColor:["rgba(232, 147, 106, .2)"]}]}})</script><p>なんと、メンタリングは終了しましたが 14 週目となる現在、週間 PV が 600 件を超えました。メンタリング３ヶ月目の目標の一つに週間 PV 500 というのもあったので、ちょっと悔しいですね😂</p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>当初、最長３ヶ月までメンタリングを受けられると聞いて、ならば２ヶ月で卒業するつもりでがんばろうと意気揚々としていましたが、やっぱりフルで３ヶ月受けることに^^;</p><p>というのも、メンタリング期間中はとても学びが多く、ブログを中心として生きていた、とても濃い日々でした。だんだん可能な限り続けて成果を出したいという気持ちに変わっていき、延長をお願いすることに。これからもメンタリングでの学びをちゃんと活かしていけるように、続けて活動していきます。</p><p>今後もメンタリングで教えていただいた課題に取り組みながら、楽しくアウトプットしていきたいと思います！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;この度、カックさん（&lt;a href=&quot;https://twitter.com/kakakakakku&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@kakakakakku&lt;/a&gt;）のブログメンタリングを受け、３ヶ月間メンティーとして活動させていただき、卒
      
    
    </summary>
    
    
      <category term="ふりかえり" scheme="https://riotz.works/articles/categories/%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A/"/>
    
    
      <category term="Blog" scheme="https://riotz.works/articles/tags/Blog/"/>
    
      <category term="Chart.js" scheme="https://riotz.works/articles/tags/Chart-js/"/>
    
  </entry>
  
  <entry>
    <title>Web アプリのセキュリティ基礎知識を学習できる『体系的に学ぶ 安全なWebアプリケーションの作り方』を読んだ</title>
    <link href="https://riotz.works/articles/lopburny/2019/09/29/book-review-of-developing-secure-web-applications/"/>
    <id>https://riotz.works/articles/lopburny/2019/09/29/book-review-of-developing-secure-web-applications/</id>
    <published>2019-09-28T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Web 開発者として仕事をしていく中で、意外にセキュリティ周りの知識が不足していたり、要件やスケジュールの都合でセキュリティへのケアを最優先して取り組むことが難しいと思うような場合があります。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_14_thumbnail.jpg" alt=""></p><p>特に最近は各種 Web フレームワークやクラウド開発が多くなってきており、気がつかないままカバーされている領域も多いため、一度基本から知識を整理したいと思い、2018年6月に第２版が発売された『体系的に学ぶ 安全なWebアプリケーションの作り方』を購入して読むことにしました。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="padding-bottom:52.5%;padding-top:120px"><a href="https://www.amazon.co.jp/%25E4%25BD%2593%25E7%25B3%25BB%25E7%259A%2584%25E3%2581%25AB%25E5%25AD%25A6%25E3%2581%25B6-%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AAWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9-%25E7%25AC%25AC2%25E7%2589%2588-%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E3%2581%258C%25E7%2594%259F%25E3%2581%25BE%25E3%2582%258C%25E3%2582%258B%25E5%258E%259F%25E7%2590%2586%25E3%2581%25A8%25E5%25AF%25BE%25E7%25AD%2596%25E3%2581%25AE%25E5%25AE%259F%25E8%25B7%25B5-%25E5%25BE%25B3%25E4%25B8%25B8/dp/4797393165" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/tMdbMp4"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><h4 id="1）Webアプリケーションの脆弱性とは"><a href="#1）Webアプリケーションの脆弱性とは" class="headerlink" title="1）Webアプリケーションの脆弱性とは"></a>1）Webアプリケーションの脆弱性とは</h4><h4 id="2）実習環境のセットアップ"><a href="#2）実習環境のセットアップ" class="headerlink" title="2）実習環境のセットアップ"></a>2）実習環境のセットアップ</h4><h4 id="3）Webセキュリティの基礎-～HTTP、セッション管理、同一オリジンポリシー、CORS"><a href="#3）Webセキュリティの基礎-～HTTP、セッション管理、同一オリジンポリシー、CORS" class="headerlink" title="3）Webセキュリティの基礎 ～HTTP、セッション管理、同一オリジンポリシー、CORS"></a>3）Webセキュリティの基礎 ～HTTP、セッション管理、同一オリジンポリシー、CORS</h4><br><ul><li>HTTP通信の仕組み</li><li>ステートレスな HTTP 認証</li><li>クッキー、セッション管理、同一オリジンポリシー、CORS 等の知識</li></ul><h4 id="4）Webアプリケーションの機能別に見るセキュリティバグ"><a href="#4）Webアプリケーションの機能別に見るセキュリティバグ" class="headerlink" title="4）Webアプリケーションの機能別に見るセキュリティバグ"></a>4）Webアプリケーションの機能別に見るセキュリティバグ</h4><br><ul><li>機能別に発生しやすい脆弱性のパターンと対応方法<ul><li>XSS（基礎・発展編）</li><li>エラーメッセージの情報漏えい</li><li>SQLインジェクション</li><li>CSRF</li><li>クリックジャッキング</li><li>オープンリダイレクト</li><li>メール送信、ファイルアクセス、JavaScript、WebAPIの問題など</li></ul></li></ul><h4 id="5）代表的なセキュリティ機能"><a href="#5）代表的なセキュリティ機能" class="headerlink" title="5）代表的なセキュリティ機能"></a>5）代表的なセキュリティ機能</h4><h4 id="6）文字コードとセキュリティ"><a href="#6）文字コードとセキュリティ" class="headerlink" title="6）文字コードとセキュリティ"></a>6）文字コードとセキュリティ</h4><h4 id="7）脆弱性診断入門"><a href="#7）脆弱性診断入門" class="headerlink" title="7）脆弱性診断入門"></a>7）脆弱性診断入門</h4><h4 id="8）Webサイトの安全性を高めるために"><a href="#8）Webサイトの安全性を高めるために" class="headerlink" title="8）Webサイトの安全性を高めるために"></a>8）Webサイトの安全性を高めるために</h4><br><ul><li>アプリ以外の側面でも考慮すべきセキュリティ施策</li></ul><h4 id="９）安全なWebアプリケーションのための開発マネジメント"><a href="#９）安全なWebアプリケーションのための開発マネジメント" class="headerlink" title="９）安全なWebアプリケーションのための開発マネジメント"></a>９）安全なWebアプリケーションのための開発マネジメント</h4><br><p>全体的にかなり量が多いので一度で読み切るのは大変ですが、簡単に読むならば、まずは 「1章：Webアプリケーションの脆弱性とは」と「3章：Webセキュリティの基礎 ～HTTP、セッション管理、同一オリジンポリシー、CORS」の内容を熟読した上で、実際に開発を進めながら 4章以降を読んでいく流れが良さそうです。</p><p>また「4章：Webアプリケーションの機能別に見るセキュリティバグ」においては、提供されているサンプルを利用するか、自分で擬似的に環境を作って実際に脆弱性を経験してみることをおすすめします。色んな脆弱性が網羅されているので、一通り内容を押さえておくと、実際に現場で役に立つ知識として活かせると思います。</p><h2 id="Webアプリケーションの脆弱性とは"><a href="#Webアプリケーションの脆弱性とは" class="headerlink" title="Webアプリケーションの脆弱性とは"></a>Webアプリケーションの脆弱性とは</h2><p>まず「1章：Webアプリケーションの脆弱性とは」を読むことで、脆弱性の定義、原因、分類、影響について概要的に理解することができます。アプリの安全性を確保する要素を大きくセキュリティバグ（脆弱性）とセキュリティ機能に分類し、それぞれに対するアプローチについて説明されています。</p><h2 id="HTTP通信の基本的な仕組みを学習する"><a href="#HTTP通信の基本的な仕組みを学習する" class="headerlink" title="HTTP通信の基本的な仕組みを学習する"></a>HTTP通信の基本的な仕組みを学習する</h2><p>「3章：Webセキュリティの基礎 」では、基礎から HTTP の仕組みを理解することができます。クライアントとサーバー間の通信が対話形式で記述されていることもあり、非常に分かりやすいです。</p><h2 id="様々なセキュリティバグ（脆弱性）パターンと対応方法を学習する"><a href="#様々なセキュリティバグ（脆弱性）パターンと対応方法を学習する" class="headerlink" title="様々なセキュリティバグ（脆弱性）パターンと対応方法を学習する"></a>様々なセキュリティバグ（脆弱性）パターンと対応方法を学習する</h2><p>PHP 及び JavaScript で書かれたサンプルコードを用いて色んな攻撃の手法が紹介されており、具体的な対応方法を知ることができます。</p><p>代表的な Web アプリケーションの脆弱性としてよく知られている XSS（クロスサイト・スクリプティング）については、基礎編と発展編で別れて紹介されています。他にも SQL インジェクション、CSRF、オープンリダイレクト等、実際に脆弱性診断の結果レポートによく出てくるような内容が網羅されているので、個人的には一番興味深く読めた章でした。</p><h2 id="セキュリティ機能を学習する"><a href="#セキュリティ機能を学習する" class="headerlink" title="セキュリティ機能を学習する"></a>セキュリティ機能を学習する</h2><p>パスワードの保存方法とハッシュの仕組みについて改めて体系的に知識をインプットできたり、ログイン画面やパスワードリセット機能の実装に必要なノウハウを知ることができます。</p><p>最近はサードパーティの認証・認可サービスにお任せするケースも多いと思いますが、多種多様な要件に応えたりトラブルシューティングできるようにするためには、この章で紹介されているセキュリティ機能の仕組みについてちゃんと理解しておく必要がありそうです。</p><h2 id="その他、アプリ以外の側面でも考慮すべきセキュリティ施策"><a href="#その他、アプリ以外の側面でも考慮すべきセキュリティ施策" class="headerlink" title="その他、アプリ以外の側面でも考慮すべきセキュリティ施策"></a>その他、アプリ以外の側面でも考慮すべきセキュリティ施策</h2><br><ul><li>サーバーの運用</li><li>ネットワーク経路</li><li>フィッシング</li><li>TLS の中間者攻撃</li><li>マルウェア対策</li></ul><p>など、幅広い領域において必要となるセキュリティ施策について学習できます。技術的な部分のみならず、Web アプリをめぐる各関係者が持つ責任と範囲の考え方についても触れられており、とても参考になります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><br><ul><li>Web アプリケーションを開発する上で必要となるセキュリティの基礎知識が学べる</li><li>様々な脆弱性が網羅的に紹介されており、脆弱性だけでなくセキュリティ機能・サーバー運用に至るまで一気通貫して学習できる</li><li>量が多いので一度にすべて読み込むのは大変だが、4章は時間をかけてでも一通り読んでおくと良い</li></ul><p>いかがだったでしょうか。</p><p>冒頭にも書きましたが、最近は多くの Web アプリが開発フレームワークやクラウドサービスに依存するようになり、知らないうちに色々カバーされていることが多いので、個人的にはそういうのが当たり前のような感覚になっていることもありました。今回の記事をきっかけに改めて基礎から体系的に学習できたので、日頃の仕事にも活かしていきたいと思います。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Web 開発者として仕事をしていく中で、意外にセキュリティ周りの知識が不足していたり、要件やスケジュールの都合でセキュリティへのケアを最優先して取り組むことが難しいと思うような場合があります。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburn
      
    
    </summary>
    
    
      <category term="書評" scheme="https://riotz.works/articles/categories/%E6%9B%B8%E8%A9%95/"/>
    
    
      <category term="Web" scheme="https://riotz.works/articles/tags/Web/"/>
    
      <category term="HTML" scheme="https://riotz.works/articles/tags/HTML/"/>
    
      <category term="Browser" scheme="https://riotz.works/articles/tags/Browser/"/>
    
      <category term="JavaScript" scheme="https://riotz.works/articles/tags/JavaScript/"/>
    
      <category term="Cookie" scheme="https://riotz.works/articles/tags/Cookie/"/>
    
      <category term="セキュリティ" scheme="https://riotz.works/articles/tags/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/"/>
    
  </entry>
  
  <entry>
    <title>Netlify へ CLI デプロイで、CI/CD する</title>
    <link href="https://riotz.works/articles/lulzneko/2019/09/23/deploy-to-netlify-via-cli-for-cicd/"/>
    <id>https://riotz.works/articles/lulzneko/2019/09/23/deploy-to-netlify-via-cli-for-cicd/</id>
    <published>2019-09-22T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>静的なサイトを手軽にホスティングしてくれる Netlify。独自のデプロイの仕組みに加えで CLI からもデプロイできます。CLI からデプロイすることで CI を使って継続的結合・デプロイが行えるようになります。Netlify の CLI デプロイについて解説します。</p><p><img src="/articles/assets/lulzneko/develop/cicd.jpg" alt=""></p><p>Netlify は、独自のデプロイの仕組みを持っているのでウェブコンソールからの設定や netlify.toml を用意することで、連携している GitHub などのソース変更から自動的にデプロイしてくれます。通常は自動デプロイがよいのですが、初期コードの投入などで Git にプッシュせず CLI から直接デプロイしたいこともあります。また CircleCI などの CI/CD サービスを使っている場合にも、CLI からのデプロイは必要となります。</p><p><strong>環境</strong><br>本記事の開発環境は以下となります。</p><ul><li>Windows 10 64bit + WSL Ubuntu 18.04.1 LTS</li><li>Node.js 12.10.0</li><li>netlify-cli 2.15.0</li></ul><h2 id="Netlify-CLI-2-0"><a href="#Netlify-CLI-2-0" class="headerlink" title="Netlify CLI 2.0"></a>Netlify CLI 2.0</h2><p>Node.js ベースで新しく作られた<a href="https://www.netlify.com/docs/cli/#installation" target="_blank" rel="noopener">Netlify 公式の CLI</a>です。<a href="https://github.com/netlify/netlifyctl/blob/master/README.md" target="_blank" rel="noopener">Go ベースの CLI</a>もあり、現在もサポートされていますが、Node.js ベースがアクティブとのことです。</p><h2 id="マニュアル・デプロイ"><a href="#マニュアル・デプロイ" class="headerlink" title="マニュアル・デプロイ"></a>マニュアル・デプロイ</h2><p>デプロイするプロジェクトに netlify-cli をインストールし実行します。<br>※ 公式ドキュメントではグローバルにインストールしていますが、グローバル汚染避けたいので個別にインストールしています。また<code>npx</code>するには重いのでプロジェクトごとに入れるのが良いでしょう。</p><p>デプロイするディレクトリを指定する場合は<code>-d [DIR]</code>で指定します。下記例では<code>dist</code>ディレクトリをデプロイします。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn install netlify-cli</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn netlify deploy -d dist</span></span><br><span class="line">Logging into your Netlify account...</span><br><span class="line">Opening https://app.netlify.com/authorize?response_type=ticket&ticket=4c8c9c402pe530d68dkd61d09adbXXXX</span><br></pre></td></tr></table></figure><p>デプロイを実行するとブラウザが表示され、CLI アクセスの認可を求められます。CLI で、デプロイを認める場合は [Authorize] をクリックします。<br><img src="/articles/assets/lulzneko/develop/netlify/01-001.png" alt=""></p><p>認可すると処理が続き、Netlify 上のサイトとの関連付けを聞かれます。<br>今回は、すでに Netlify にサイトが作られている前提で<code>Link this directory to an existing site</code>を選択しました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? What would you like to do? (Use arrow keys)</span><br><span class="line">❯ Link this directory to an existing site</span><br><span class="line">  +  Create & configure a new site</span><br></pre></td></tr></table></figure><p>既存のサイトを指定する方法を聞かれます。今回は<code>Choose from a list of your recently updated sites</code>でリストから選択しました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? How do you want to link this folder to a site? (Use arrow keys)</span><br><span class="line">  Use current git remote origin</span><br><span class="line">  Search by full or partial site name</span><br><span class="line">❯ Choose from a list of your recently updated sites</span><br><span class="line">  Enter a site ID</span><br></pre></td></tr></table></figure><p>サイトを選択とするとデプロイが開始するのですが、たまに失敗するケースがあります。<br>法則性が読めないので何とも言えないのですが、失敗したらデプロイのコマンドを再実行すると成功します。再実行時は、先ほどの設定が保存されているので認可やサイト選択は省略されます。</p><p>デプロイが成功すると<code>Live Draft URL</code>が出力されます。<br>その URL にアクセスするとデプロイされたサイトが表示されます。</p><p>なおプロダクションとしてデプロイしたい場合は、コマンドライン引数に<code>--prod</code>を渡します。<br>e.g.<code>yarn netlify deploy --prod -d dist</code></p><p>ここまでで設定した内容は、以下に保存されています。<br>※ 不要になった場合は安全のために削除しておきましょう。</p><ul><li>認可情報:<code>~/.netlify/config.json</code></li><li>サイト情報:<code>.netlify/state.json</code>(プロジェクトのディレクトリ))</li></ul><h2 id="自動デプロイのための設定"><a href="#自動デプロイのための設定" class="headerlink" title="自動デプロイのための設定"></a>自動デプロイのための設定</h2><p>マニュアル・デプロイの方法はブラウザで認証認可が必要となるため CI/CD では利用できません。<br>CI/CD で使う場合は、自動デプロイできるように設定します。</p><p>Netlify の Personal access tokens のページを表示し、[New access token] をクリックします。<br><a href="https://app.netlify.com/user/applications#personal-access-tokens" target="_blank" rel="noopener">https://app.netlify.com/user/applications#personal-access-tokens</a><br><img src="/articles/assets/lulzneko/develop/netlify/01-002.png" alt=""></p><p>Create a new personal access token 画面が表示されるので、[Description of your token] にトークンの説明となる文字列を入力し [Generate token] をクリックします。今回はテスト用に [deploy-via-cli] としました。<br><img src="/articles/assets/lulzneko/develop/netlify/01-003.png" alt=""></p><p>アクセストークンが生成されるので控えておきます。<br><img src="/articles/assets/lulzneko/develop/netlify/01-004.png" alt=""></p><p>続いて、デプロイするサイトの設定を表示し、[API ID] を控えておきます。<br><img src="/articles/assets/lulzneko/develop/netlify/01-005.png" alt=""></p><p>デプロイするプロジェクトに netlify-cli をインストールしておき、以下のコマンドでデプロイします。</p><ul><li><code>--prod</code>で、プロダクションのデプロイ</li><li><code>-d [DIR]</code>で、デプロイするディレクトリを指定</li><li><code>-a [AUTH_TOKEN]</code>で、パーソナルトークンを指定</li><li><code>-s [SITE_ID]</code>で、デプロイするサイトの APP ID を指定<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn netlify deploy --prod -d dist -a [AUTH_TOKEN] -s [SITE_ID]</span></span><br></pre></td></tr></table></figure></li></ul><p>この場合だと　<code>package.json</code>なりに [AUTH_TOKEN] を書かなければなりません。環境変数を使う形にします。<br>CI/CD サービスで環境変数を設定できるので、そちらに設定します。<br>※ 環境変数名を ${NETLIFY_AUTH_TOKEN} と ${NETLIFY_SITE_ID} にした場合は、それぞれ<code>-a</code>と<code>-s</code>のオプション指定は省略できます</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn netlify deploy --prod -d dist -a <span class="variable">${NETLIFY_AUTH_TOKEN}</span> -s <span class="variable">${NETLIFY_SITE_ID}</span></span></span><br></pre></td></tr></table></figure><hr><p>手軽にホスティングできながらも、本格的な CI/CD にも対応できる Netlify、素晴らしいですね。</p><p>ただし、個人に紐づくアクセストークンを使うので CI などに設定する場合は、その人がプロジェクトから離れた場合の引継ぎなどを忘れないようにしましょう。GitHub などはリポジトリでトークンが作れるので、今後そのようになると嬉しいです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;静的なサイトを手軽にホスティングしてくれる Netlify。独自のデプロイの仕組みに加えで CLI からもデプロイできます。CLI からデプロイすることで CI を使って継続的結合・デプロイが行えるようになります。Netlify の CLI デプロイについて解説します。&lt;/
      
    
    </summary>
    
    
      <category term="開発環境" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/"/>
    
    
      <category term="Node.js" scheme="https://riotz.works/articles/tags/Node-js/"/>
    
      <category term="CircleCI" scheme="https://riotz.works/articles/tags/CircleCI/"/>
    
      <category term="Netlify" scheme="https://riotz.works/articles/tags/Netlify/"/>
    
  </entry>
  
  <entry>
    <title>ISO 8601 形式で特定の期間を指定する方法</title>
    <link href="https://riotz.works/articles/lopburny/2019/09/20/introduce-iso-8601-time-interval-spec/"/>
    <id>https://riotz.works/articles/lopburny/2019/09/20/introduce-iso-8601-time-interval-spec/</id>
    <published>2019-09-19T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>WebAPI の GET パラメータとして「開始日時」「終了日時」を指定するような時に使える、ISO 8601 の Time intervals (period of time) フォーマットについて紹介します。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_13_thumbnail.jpg" alt=""></p><h2 id="ISO-8601-とは？"><a href="#ISO-8601-とは？" class="headerlink" title="ISO 8601 とは？"></a>ISO 8601 とは？</h2><p>日付と時刻を表現するフォーマットを定めた国際規格です。以下のような文字列で表現されます。<br><br></p><ul><li><code>YYYY-MM-DDThh:mm:ss</code>※末尾にUTC の場合は Z、JSTの場合は +09:00 を指定</li><li>e.g.<code>2019-09-20T21:29:58+09:00</code></li></ul><p>一般的に公開されている各種サービスの WebAPI で、日付とタイムスタンプのような時刻を表現するフォーマットとして広く使われています。詳細については Wikipedia になってしまいますが<a href="https://ja.wikipedia.org/wiki/ISO_8601#%E6%9C%9F%E9%96%93" target="_blank" rel="noopener">こちら</a>を参照してください。</p><p>ちなみに、ISO 8601 のオフィシャルな仕様書は有料となっています。気になる方はチェックしてみてください。<br><br></p><ul><li><a href="https://www.iso.org/standard/70907.html" target="_blank" rel="noopener">ISO 8601-1:2019 - Date and time – Representations for information interchange – Part 1: Basic rules</a></li><li><a href="https://www.iso.org/standard/70908.html" target="_blank" rel="noopener">ISO 8601-2:2019 - Date and time – Representations for information interchange – Part 2: Extensions</a></li></ul><p>ISO 8601 については多くの言語／ライブラリにてサポートされており、ISO 8601 形式での出力やパース、Validation などの機能が備わっています。</p><h2 id="ISO-8601-の-Time-Intervals-period-of-time-とは？"><a href="#ISO-8601-の-Time-Intervals-period-of-time-とは？" class="headerlink" title="ISO 8601 の Time Intervals (period of time) とは？"></a>ISO 8601 の Time Intervals (period of time) とは？</h2><p>冒頭で記述したように、「開始日時」「終了日時」がある特定の期間を表現する時に使えるフォーマットです。開始日時と終了日時の間に半角スラッシュ<code>/</code>を挟んで記述します。<br><br></p><ul><li><code>{開始日時}/{終了日時}</code></li><li>e.g.<code>2019-08-20T21:29:58+09:00/2019-09-20T21:29:58+09:00</code></li></ul><p>上記の他にもいくつか表現方法はありますが、実装に用いる言語やライブラリの都合を考えて選択すると良さそうです。</p><h2 id="何に使える？"><a href="#何に使える？" class="headerlink" title="何に使える？"></a>何に使える？</h2><p>例えば日付の属性を持つデータを検索する WebAPI で、<code>start</code>と<code>end</code>または<code>from</code>と<code>to</code>といった範囲（期間）を指定するパラメータが必要になる場合、まとめて<code>period</code>といった一つのパラメータにすることができます。</p><p>状況によりますが、パラメータの数が減り、「ISO 8601 Time intervals フォーマットで指定してください」と簡単に明記できるため、WebAPI の仕様をよりシンプルに記述することができます。</p><p>いかがだったでしょうか。</p><p>簡単な内容でしたが、個人的な経験として WebAPI 仕様を書いていく中で指摘されたことがあり、記事にしてみました。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WebAPI の GET パラメータとして「開始日時」「終了日時」を指定するような時に使える、ISO 8601 の Time intervals (period of time) フォーマットについて紹介します。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/asse
      
    
    </summary>
    
    
      <category term="開発" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA/"/>
    
    
      <category term="Web" scheme="https://riotz.works/articles/tags/Web/"/>
    
      <category term="WebAPI" scheme="https://riotz.works/articles/tags/WebAPI/"/>
    
      <category term="HTTP" scheme="https://riotz.works/articles/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>デバッグに便利！ブラウザの HTTP 通信ログをアーカイブして共有・確認できる HTTP Archive File / Viewer の紹介</title>
    <link href="https://riotz.works/articles/lopburny/2019/09/15/introduce-http-archive-file-and-viewer/"/>
    <id>https://riotz.works/articles/lopburny/2019/09/15/introduce-http-archive-file-and-viewer/</id>
    <published>2019-09-14T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>ブラウザと API サーバーの繋ぎこみや画面遷移を伴う他サービスとの連携をする時、予期せぬエラーが起きたり想定外の挙動をしてデバッグに苦労したという経験をお持ちの方は多いのではないでしょうか。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_12_thumbnail.jpg" alt=""></p><p>多くの Web アプリ開発で、API サーバーとの通信がどのように行われているかを把握することは不可欠です。上手く行かない場合、どのようなリクエストが送られたか、どのようなレスポンスが返されたかを確認するために、ブラウザのデベロッパーツール（開発者ツール）を利用したり、Fiddler などのツールを利用してデバックすることが多いと思います。</p><p>この記事では、こういった時に役立つ手法として、ブラウザのデベロッパーツールで HTTP 通信をキャプチャしてその内容をアーカイブとして保存する方法と、保存したアーカイブファイル（HARファイル）を閲覧するツールについて紹介します。</p><h2 id="HAR-ファイルとは？"><a href="#HAR-ファイルとは？" class="headerlink" title="HAR ファイルとは？"></a>HAR ファイルとは？</h2><p>HTTP Archive (HAR) File と言います。通常、一つの Web ページを閲覧すると、そのページで使われる各種ファイル（CSS や JS、画像など）に加え、XHR (XMLHttpRequest）を利用した非同期通信に至るまで多くの HTTP 通信が行われます。HARファイルは、このような一連の通信内容のキャプチャをまとめてJSON 形式でエクスポートしたものになります。</p><p>開発者同士でこの HAR ファイルを共有することで、トラブルシューティングに役立てます。クライアント開発側とサーバー開発側の間で断片的なスニペットを送り合うより効率がよく、情報を網羅的に共有できるといったメリットがあります。</p><p>具体的には、デベロッパーツールの Network タブを開き、ページをロードしてみます。<br>※ Chrome の例です。<br>※ ページをロードする前に “Preserve log“ にチェックを入れておきます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_12_pic_1.jpg" alt=""></p><br><p>この状態で HAR ファイルとしてエクスポートすると、下記のような JSON 形式でに出力されます。</p><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"log"</span>: {</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.2"</span>,</span><br><span class="line">    <span class="attr">"creator"</span>: {</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"WebInspector"</span>,</span><br><span class="line">      <span class="attr">"version"</span>: <span class="string">"537.36"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"pages"</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"startedDateTime"</span>: <span class="string">"2019-09-14T15:35:52.131Z"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"page_1"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"https://riotz.works/"</span>,</span><br><span class="line">        <span class="attr">"pageTimings"</span>: {</span><br><span class="line">          <span class="attr">"onContentLoad"</span>: <span class="number">1157.8740000004473</span>,</span><br><span class="line">          <span class="attr">"onLoad"</span>: <span class="number">1449.5640000004641</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"entries"</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"startedDateTime"</span>: <span class="string">"2019-09-14T15:35:52.128Z"</span>,</span><br><span class="line">        <span class="attr">"time"</span>: <span class="number">329.85700000062934</span>,</span><br><span class="line">        <span class="attr">"request"</span>: {</span><br><span class="line">          <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">          <span class="attr">"url"</span>: <span class="string">"https://riotz.works/"</span>,</span><br><span class="line">          <span class="attr">"httpVersion"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">          <span class="attr">"headers"</span>: [</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><h2 id="HAR-ファイルを取得する方法"><a href="#HAR-ファイルを取得する方法" class="headerlink" title="HAR ファイルを取得する方法"></a>HAR ファイルを取得する方法</h2><p>HAR ファイル出力は各ブラウザでサポートされており、取得の仕方について大きく異る点はありません。Chrome の場合、前述と同じくデベロッパーツールを開いて Network タブを選択、ログをクリアして “Preserve log“ にチェックを入れ、ページをロードします。</p><p>そうすると、ページを構成するファイルのダウンロードや通信が発生していることがわかります。どの項目でもいいので、右クリックして Save all as HAR with content すると保存できます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_12_pic_2.jpg" alt=""></p><h2 id="HAR-ファイルの中身を確認するためのツール"><a href="#HAR-ファイルの中身を確認するためのツール" class="headerlink" title="HAR ファイルの中身を確認するためのツール"></a>HAR ファイルの中身を確認するためのツール</h2><p>先程作成した HAR ファイルは、JSON 形式となっているので普通にエディタで開いて内容を確認することもできます。しかしそのままでは分かりづらいので、ビューアーのツールを利用することになります。</p><h3 id="G-Suite-Toolbox-HAR-Analyzer"><a href="#G-Suite-Toolbox-HAR-Analyzer" class="headerlink" title="G Suite Toolbox - HAR Analyzer"></a>G Suite Toolbox - HAR Analyzer</h3><p>G Suite Toolbox は本来 G Suite 関連のトラブルシューティングに使われるツールですが、ブラウザ上で利用でき、UI も使い勝手がよく便利なのでおすすめです。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_12_pic_3.jpg" alt=""></p><p>🔗<a href="https://toolbox.googleapps.com/apps/har_analyzer/" target="_blank" rel="noopener">G Suite Toolbox - HAR Analyzer</a></p><h3 id="HTTP-Archive-Viewer-Chrome-Extension"><a href="#HTTP-Archive-Viewer-Chrome-Extension" class="headerlink" title="HTTP Archive Viewer (Chrome Extension)"></a>HTTP Archive Viewer (Chrome Extension)</h3><p>こちらは Chrome の拡張機能として利用できるツールです。画面内で文字列検索（Ctrl/Cmd+F）ができないので、前述の HAR Analyzer の方を使いたくなるかもしれません。デベロッパツールの Network タブで見るのと同じような UI と感覚で操作できることが特徴です。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_12_pic_4.jpg" alt=""></p><p>🔗<a href="https://chrome.google.com/webstore/detail/http-archive-viewer/ebbdbdmhegaoooipfnjikefdpeoaidml?hl=ja" target="_blank" rel="noopener">HTTP Archive Viewer</a></p><p>いかがだったでしょうか。</p><p>HAR ファイルはあまり新しい仕組みとは言えないですが、個人的には複数のチームで開発する現場で役に立ったことがあったので、紹介してみました。最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ブラウザと API サーバーの繋ぎこみや画面遷移を伴う他サービスとの連携をする時、予期せぬエラーが起きたり想定外の挙動をしてデバッグに苦労したという経験をお持ちの方は多いのではないでしょうか。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburn
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="Web" scheme="https://riotz.works/articles/tags/Web/"/>
    
      <category term="HTTP" scheme="https://riotz.works/articles/tags/HTTP/"/>
    
      <category term="Browser" scheme="https://riotz.works/articles/tags/Browser/"/>
    
      <category term="Cookie" scheme="https://riotz.works/articles/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>Web Storage (localStorage, sessionStorage) を使用する時の注意点</title>
    <link href="https://riotz.works/articles/lopburny/2019/09/13/notes-when-using-web-storage/"/>
    <id>https://riotz.works/articles/lopburny/2019/09/13/notes-when-using-web-storage/</id>
    <published>2019-09-12T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>ブラウザのローカル領域にデータを保存できる便利な仕組みの Web Storage ですが、その使い方についてはいくつが注意点があります。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_11_thumbnail.jpg" alt=""></p><p>Web Storage (localStorage, sessionStorage) の詳細について知りたい方は、<a href="/articles/lopburny/2019/09/06/introduction-and-use-of-web-storage/">前回の記事</a>をチェックしてみてください。<br>この記事では、Web Storage を使用する上で注意した方が良い点について紹介します。</p><h3 id="プライベート・シークレットモードでも-Web-Storage-API-が使えるか"><a href="#プライベート・シークレットモードでも-Web-Storage-API-が使えるか" class="headerlink" title="プライベート・シークレットモードでも Web Storage API が使えるか"></a>プライベート・シークレットモードでも Web Storage API が使えるか</h3><p>少し前まで、Safari ではブライベートモードにして localStorage にアクセスするとエラーになる問題がありました。この件に関しては 2019 年現在 Fix されていますが、サポートするプラウザの範囲が広い場合、念のためしっかり確認しておいた方が安心かなと思います。</p><h3 id="通常モードからプライベートモードに切り替えた場合（またはその逆）の挙動を確認する"><a href="#通常モードからプライベートモードに切り替えた場合（またはその逆）の挙動を確認する" class="headerlink" title="通常モードからプライベートモードに切り替えた場合（またはその逆）の挙動を確認する"></a>通常モードからプライベートモードに切り替えた場合（またはその逆）の挙動を確認する</h3><p>通常モードとプライベートモードを切り替えながらアプリを操作することも想定に入れ、主要機能やユーザー認証後の正常動作が localStorage に依存していないかチェックしておく必要があります。<br>※例えば、URL 直打ちでの表示・画面遷移・エラーハンドリングなど</p><p>各種ブラウザの仕様上、プライベートモードになると localStorage も通常モードとは別の領域となりますので、基本的に localStorage に関しては別ブラウザで開くのと同じ状態になると考えた方が良いですね。</p><h3 id="ユーザーに紐づくデータの扱いに注意する"><a href="#ユーザーに紐づくデータの扱いに注意する" class="headerlink" title="ユーザーに紐づくデータの扱いに注意する"></a>ユーザーに紐づくデータの扱いに注意する</h3><p>ユーザー情報を含め、アプリの主要機能において localStorage にデータをキャッシュするような仕組みは多く使われています。この時、localStorage に保存するデータは有効期限をつけて管理することができないため、ログイン／ログアウトまたはセッション切れなどの状態変更に伴い、適度にクリーンアップするといった対応が必要になります。</p><h3 id="センシティブな情報、機密情報を含めない"><a href="#センシティブな情報、機密情報を含めない" class="headerlink" title="センシティブな情報、機密情報を含めない"></a>センシティブな情報、機密情報を含めない</h3><p>前回の記事でも触れていますが、Web Storage は JavaScript の API を利用することになっており、XSS(Cross-Site Scripting) のような脆弱性で任意の JavaScript コードが実行されてしまうと Web Storage の内容が抜かれてしまう可能性があります。よって、個人情報を含む情報・セッショントークンなど、漏れてはいけない情報を格納しないようにすることが望ましいとされています。</p><p>その点、WebAPI の認証トークンなど機密性の高い情報については<code>httponly</code>属性をつけた Cookie をサーバー側からセットして回避するようなやり方もあったりします。<br>※<code>httponly</code>属性をつけることで JavaScript から Cookie を操作することができなくなるため</p><p>また、JWT(JSON Web Token) のようなステートレスなトークンを保存するケースもあります。上記のようなリスクを十分考慮して、他の手段を検討するか、有効期限をかなり短くするといった工夫が必要になります。</p><h3 id="キー名が重複する場合がないか確認する"><a href="#キー名が重複する場合がないか確認する" class="headerlink" title="キー名が重複する場合がないか確認する"></a>キー名が重複する場合がないか確認する</h3><p>開発が進むに連れて多数のライブラリを利用することになります。この時、アプリ実装側とライブラリ又はライブラリ同士で同じキーを用いて Web Storage にアクセスすることがまれにあります。</p><p>当然ながらキーが同じであれば後から書き込まれた値で上書きされてしまいます。これを 100% 事前に把握することは難しいですが、アプリ側であればキーに prefix をつけたり、ライブラリ導入時は念入りに確認しておくことで、バグが減る結果に繋がることもあるかと思います。</p><p>以上、一見便利そうな Web Storage ですが、いくつか考慮すべきポイントがあるので記事にしてみました。皆さんの参考になれば幸いです。最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ブラウザのローカル領域にデータを保存できる便利な仕組みの Web Storage ですが、その使い方についてはいくつが注意点があります。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_blog_11_thumb
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="Web" scheme="https://riotz.works/articles/tags/Web/"/>
    
      <category term="HTML" scheme="https://riotz.works/articles/tags/HTML/"/>
    
      <category term="Browser" scheme="https://riotz.works/articles/tags/Browser/"/>
    
      <category term="JavaScript" scheme="https://riotz.works/articles/tags/JavaScript/"/>
    
      <category term="Cookie" scheme="https://riotz.works/articles/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>Web Storage (localStorage, sessionStorage) の概要と使い方</title>
    <link href="https://riotz.works/articles/lopburny/2019/09/06/introduction-and-use-of-web-storage/"/>
    <id>https://riotz.works/articles/lopburny/2019/09/06/introduction-and-use-of-web-storage/</id>
    <published>2019-09-05T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>ウェブアプリケーション開発に、localStorage や sessionStorage といった Web Storage を使うことが多くなってきています。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_10_thumbnail.jpg" alt=""></p><p>この記事では、Web Storage についての概要と使い方についてまとめてご紹介します。</p><h2 id="Web-Storage-とは何か"><a href="#Web-Storage-とは何か" class="headerlink" title="Web Storage とは何か"></a>Web Storage とは何か</h2><p>ブラウザのローカル領域に key-value 形式のデータを保存する仕組みです。Web Storage の仕様をサポートするブラウザは Web Storage API が使えるようになっています。JavaScript でこの API を利用することで Web Storage にアクセスすることができます。保存できるデータ型は文字列のみで、オリジンごとに区切られた保存領域（5MBまで）を持ち、異なるオリジンの Web Storage にアクセスすることはできません。</p><p>「オリジン」について少し具体的に説明すると、<br><br></p><ul><li>URL のスキーム（e.g.<code>http</code>,<code>https</code>）</li><li>ホスト（e.g.<code>example.com</code>等のドメイン）</li><li>ポート（e.g.<code>80</code>,<code>443</code>）</li></ul><p>上記の項目すべてが同じであれば、Web Storage にアクセスしてデータを出し入れすることができます。<br>例えば、以下２つの URL においては同じオリジンとして Web Storage が共有されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://example.com/main/index.html</span><br><span class="line">https://example.com/sub/index.html</span><br></pre></td></tr></table></figure><p>また、以下についてはドメインが異なる（オリジンが異なる）ため、お互いの Web Storage にアクセスすることはできません。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://example1.com/index.html</span><br><span class="line">https://example2.com/index.html</span><br></pre></td></tr></table></figure><p>サブドメインでも Web Storage は異なります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://app1.example.com/index.html</span><br><span class="line">https://app2.exapmle.com/index.html</span><br></pre></td></tr></table></figure><p>平たく言えば、同じウェブサイト内・アプリ内であれば使えるということになりますね。</p><p>Web Storage は、2019年現在、モバイルを含めほとんどのモダンブラウザにてサポートされていますが、正確には<a href="https://developer.mozilla.org/ja/docs/Web/API/Web_Storage_API#Browser_compatibility" target="_blank" rel="noopener">こちら</a>をご参考ください。</p><p>実際に Web Storage を使っている様子を確認することもできます。Google Chrome の場合、ディベロッパーツールのコンソールを開き、Application タブ > 左側メニュー Storage から Local Storage または Session Storage をクリックして中身を見ることができます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_10_pic_1.jpg" alt=""></p><p>ここまでの内容は以下のドキュメントを参考にしていますので、詳細を知りたい方は一度読んでみてください。</p><br><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://developer.mozilla.org/ja/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/rll6VAC"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><br><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://developer.mozilla.org/ja/docs/Glossary/Origin" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/gsgAcFm"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="localStorage-と-sessionStorage"><a href="#localStorage-と-sessionStorage" class="headerlink" title="localStorage と sessionStorage"></a>localStorage と sessionStorage</h2><p>Web Storage は２つのタイプのものがあります。</p><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><br><ul><li>保存したデータは削除しない限り永続的に保存される（なくならない）</li><li>別タブやウィンドウでも共有される</li><li>ブラウザを閉じたりもう一度開いたりしてもデータは残る</li></ul><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><br><ul><li>保存したデータはブラウザを閉じるまでの間のみ保存される</li><li>別タブやウィンドウでも共有されない</li></ul><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>どういったユースケースがあるのでしょうか？実際のところ、シンプルかつ便利なゆえに本当に色んな用途で使われていますが、よく見かけるケースとしていくつかピックアップしてみると、以下のようなことが挙げられます。<br><br></p><ul><li>表示に関する各種設定情報（e.g. お知らせ、通知表示の有無）</li><li>ユーザーの操作やアクションに関する情報（e.g. お気に入り、閲覧したページ、商品）</li><li>クライアント側の使用状況をまとめてサーバーに送信するための一時保管（e.g. エラーIDをまとめてログサーバーに送信）</li><li>サーバーとのデータ不整合を防止するためのバージョン情報</li></ul><p>一般的には localStorage を利用するケースが多いと思います。また、すべての場面において使って問題ないわけではありません。いくつか注意点がありますので、これについては別記事で紹介する予定です。ぜひチェックしてみてください。</p><h2 id="Cookie-との違いは？"><a href="#Cookie-との違いは？" class="headerlink" title="Cookie との違いは？"></a>Cookie との違いは？</h2><p>クライアント側でデータを保存する仕組みということで Cookie と似たような印象を持たれることも多いかもしれません。念のため簡単に触れておきたいと思います。</p><h3 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h3><p>Cookie は、サーバーと HTTP 通信をする度に HTTP ヘッダーに含まれて送信され、サーバー側からセットすることもできます。よって、サーバーとのやり取りに伴う状態を管理する場合に使われることが多いです。（サーバーとのセッション管理等）</p><p>一方、Web Storage はサーバーとの通信とは関係なくクライアント側（ブラウザ）でのみデータを保持します。</p><h3 id="容量制限"><a href="#容量制限" class="headerlink" title="容量制限"></a>容量制限</h3><p>Cookie は 4KB、Web Storage は 5MB です。</p><h3 id="JavaScriptによる操作"><a href="#JavaScriptによる操作" class="headerlink" title="JavaScriptによる操作"></a>JavaScriptによる操作</h3><p>通常、Cookie も Web Storage も JavaScript で操作することが可能です。</p><p>しかし Cookie 場合、httponly 属性をつけることで JavaScript から操作することを無効にすることができます。これにより悪意のある第３者によって任意のJSが実行される（e.g. XSS: Cross Site Scripting）ような場合でも、Cookie の中身を JavaScript 経由で見ることができなくなります。</p><p>Web Storage の場合、そのような機能はありません。</p><p>他にも、Cookie には様々な属性（domain, path, 有効期限… etc.）が用意されているため、挙動を細かく制御することができます。</p><h2 id="基本的な使い方"><a href="#基本的な使い方" class="headerlink" title="基本的な使い方"></a>基本的な使い方</h2><p>Web Storage API を利用します。localStorage も sessionStorage も、同じく Storage インタフェースを実装する形になっており、使い方は同じです。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Storage.setItem(key, value)</span></span><br><span class="line"><span class="comment">// Storage.getItem(key)</span></span><br><span class="line"></span><br><span class="line">localStorage.setItem(<span class="string">'dummy_key'</span>, <span class="string">'dummy_value'</span>);</span><br><span class="line"><span class="keyword">const</span> item1 = localStorage.getItem(<span class="string">'dummy_key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(item1); <span class="comment">// dummy_value</span></span><br><span class="line"></span><br><span class="line">sessionStorage.setItem(<span class="string">'dummy_key'</span>, <span class="string">'dummy_value'</span>);</span><br><span class="line"><span class="keyword">const</span> item2 = sessionStorage.getItem(<span class="string">'dummy_key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(item2); <span class="comment">// dummy_value</span></span><br></pre></td></tr></table></figure><p>Web Storage の key と value に使えるデータ型は、文字列のみとなります。配列やオブジェクトのような形でデータを保存したい場合は、一度 JSON 文字列に変更して保存します。</p><pre><code class="javascript">localStorage.setItem(<span class="string">'dummy_key_2'</span>, <span class="built_in">JSON</span>.stringify({ <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">20</span> }));<span class="keyword">const</span> item3 = localStorage.getItem(<span class="string">'dummy_key_2'</span>);<span class="keyword">const</span> parsed1 = <span class="built_in">JSON</span>.parse(item3); <span class="comment">// {"name":"John","age":20}</span>sessionStorage.setItem(<span class="string">'dummy_key_2'</span>, <span class="built_in">JSON</span>.stringify({ <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">20</span> }));<span class="keyword">const</span> item4 = sessionStorage.getItem(<span class="string">'dummy_key_2'</span>);<span class="keyword">const</span> parsed2 = <span class="built_in">JSON</span>.parse(item4); <span class="comment">// {"name":"John","age":20}</span></code></pre><p>保存したデータを削除することもできます。</p><pre><code class="javascript"><span class="comment">// Storage.removeItem(key)</span><span class="comment">// Storage.clear()</span>localStorage.removeItem(<span class="string">'dummy_key'</span>);sessionStorage.removeItem(<span class="string">'dummy_key'</span>);<span class="comment">// すべて削除する</span>localStorage.clear();sessionStorage.clear();</code></pre><p>いかがだったでしょうか。</p><p>Web Storage はシンプルながら何かと役に立つ場面が多く、大変便利ですが、いくつが注意点もあります。これについては別記事にて紹介する予定ですので、合わせてチェックしてみてください。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ウェブアプリケーション開発に、localStorage や sessionStorage といった Web Storage を使うことが多くなってきています。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_bl
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="Web" scheme="https://riotz.works/articles/tags/Web/"/>
    
      <category term="HTML" scheme="https://riotz.works/articles/tags/HTML/"/>
    
      <category term="Browser" scheme="https://riotz.works/articles/tags/Browser/"/>
    
      <category term="JavaScript" scheme="https://riotz.works/articles/tags/JavaScript/"/>
    
      <category term="Cookie" scheme="https://riotz.works/articles/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript で複数のモジュールをまとめて export, import する</title>
    <link href="https://riotz.works/articles/lopburny/2019/08/28/using-typescript-re-export-and-import-syntax-to-improve-module-arrangement/"/>
    <id>https://riotz.works/articles/lopburny/2019/08/28/using-typescript-re-export-and-import-syntax-to-improve-module-arrangement/</id>
    <published>2019-08-27T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript を使って Node.js のアプリを開発していると、だんだんモジュールの数が増えていき、export, import 文が長くなったり冗長な感じになったりします。また、プロジェクト全体の共通機能をまとめてモジュール化する仕組みを考えたりと、モジュールの構成をどうするかについては常々悩ましいところがあります。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_9_thumbnail.jpg" alt=""></p><p>この記事では、モジュール構成のリファクタリングに使える<code>re-exports</code>とそれを import する方法について紹介します。元々は ES Modules の仕様なので、Interface など TypeScript の機能を除き JS でも同じく使える仕組みになります。</p><p>※ただし、ES Modules の構文（JS）をそのまま Node.js 上で実行する場合は mjs 拡張子の使用・実験フラグ付きの起動が必要になり、詳細については割愛させていただきます。</p><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>例えば、以下データモデルの Class または Interface を定義して models ディレクトリ以下に配置します。<br>index.ts を作成、それらをまとめて export しておきます。<br><br></p><ul><li>models/index.ts<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./User'</span>    <span class="comment">// User.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./Book'</span>    <span class="comment">// Book.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./Contact'</span> <span class="comment">// Contact.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// default は使えないので注意</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>必要なモジュールを以下のように適宜 importします。</p><br><ul><li><p>１モジュールのみ import</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { User } <span class="keyword">from</span> <span class="string">'./models'</span></span><br></pre></td></tr></table></figure><br></li><li><p>複数のモジュールを import</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { User, Book } <span class="keyword">from</span> <span class="string">'./models'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user: User = { id: <span class="string">'user_id'</span> }</span><br><span class="line"><span class="keyword">const</span> book: Book = { id: <span class="string">'book_id'</span> }</span><br></pre></td></tr></table></figure><br></li><li><p>別名をつけてまとめて import</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Model <span class="keyword">from</span> <span class="string">'./models'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user: Model.User = { id: <span class="string">'user_id'</span> }</span><br><span class="line"><span class="keyword">const</span> book: Model.Book = { id: <span class="string">'book_id'</span> }</span><br><span class="line"><span class="keyword">const</span> contact: Model.Contact = { id: <span class="string">'contact_id'</span> }</span><br></pre></td></tr></table></figure></li></ul><h2 id="公式ドキュメント"><a href="#公式ドキュメント" class="headerlink" title="公式ドキュメント"></a>公式ドキュメント</h2><p>公式ドキュメントでこの内容を確認したい場合は、下記をご参考ください。</p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://www.typescriptlang.org/docs/handbook/modules.html#re-exports" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/Kp3ho7j"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p><code>export * from '{PATH}'</code>でまとめて export 、必要に応じて適宜 import することができます。</p><p>アプリロジックの機能またはレイヤーごとにモジュールをまとめたり、プロジェクト共通の Util クラスをまとめて外部モジュール化したりと、色んな場面で利用できると思いますので、一度試してみてはいかがでしょうか。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TypeScript を使って Node.js のアプリを開発していると、だんだんモジュールの数が増えていき、export, import 文が長くなったり冗長な感じになったりします。また、プロジェクト全体の共通機能をまとめてモジュール化する仕組みを考えたりと、モジュールの
      
    
    </summary>
    
    
      <category term="開発" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA/"/>
    
    
      <category term="TypeScript" scheme="https://riotz.works/articles/tags/TypeScript/"/>
    
      <category term="Node.js" scheme="https://riotz.works/articles/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>draw.io を利用する３つの方法</title>
    <link href="https://riotz.works/articles/lopburny/2019/08/24/3-ways-to-use-draw-io/"/>
    <id>https://riotz.works/articles/lopburny/2019/08/24/3-ways-to-use-draw-io/</id>
    <published>2019-08-23T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>システム構成図を書く時、ツール選びに悩むことってありませんか？</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_8_thumbnail.jpg" alt=""></p><p>システム構成図に限らずとも、情報を分かりやすく表現する手段として、いわゆる「お絵かきツール」はとても需要があるのではないでしょうか。例えば Nulab の Cacoo だったり、MS Visio・Excel・PowerPoint だったりと、人によって・現場によって多種多様だと思いますが、今回はその中でも個人的によく使っている draw.io について紹介し、その使い方について共有したいと思います。</p><h2 id="draw-io-とは？"><a href="#draw-io-とは？" class="headerlink" title="draw.io とは？"></a>draw.io とは？</h2><p>システム構成図や図面等の作成に便利なお絵かきツールで、ブラウザ上で動くウェブアプリケーションです。オープンソース化（Apache License 2.0）されており、提供元 JGraph の GitHub リポジトリにてソースコードが公開されています。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://github.com/jgraph" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/5hWsFl4"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>公式サイトがあるので、合わせてチェックしてみてください。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://about.draw.io/" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/h85zveL"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>作成したデータは XML で出力され、ローカルに保存できるだけでなく、Google Drive・OneDrive・GitHub などと連携して保存することができます。もちろん、PNG、SVG、PDF 等の形式でのエクスポートもサポートされています。簡単ですが個人的な観点で以下まとめてみました。</p><h3 id="draw-io-のいいところ"><a href="#draw-io-のいいところ" class="headerlink" title="draw.io のいいところ"></a>draw.io のいいところ</h3><br><ul><li>単体での利用は、商用利用も含めて無料<a href="https://about.draw.io/pricing/" target="_blank" rel="noopener">※公式サイト（Pricing）</a></li><li>会員登録不要</li><li>作成したデータの管理は自分次第（クライアントサイドのみで動くため）<ul><li>ローカルに保存するものよし、クラウドサービスに保存するのもよし</li><li>気軽にクラウドサービスを利用できない環境では特に便利</li></ul></li><li>図形のパーツが豊富<ul><li>最新のクラウドサービス（AWS・Azure・GCP）の各種アイコン</li><li>Material Design のパーツ等</li></ul></li></ul><h3 id="draw-io-の不便なところ"><a href="#draw-io-の不便なところ" class="headerlink" title="draw.io の不便なところ"></a>draw.io の不便なところ</h3><br><ul><li>複数の人で共同編集できない</li><li>コメントを書く機能がない</li><li>履歴を管理する機能がない</li><li>書いた図を共有する仕組みがない（※Plugin などを利用すれば可能）</li></ul><p>これらの項目については、Cacoo を使うと非常に便利な形で提供されていますので、気になる方は一度試してみてください。</p><h2 id="draw-io-を利用する方法"><a href="#draw-io-を利用する方法" class="headerlink" title="draw.io を利用する方法"></a>draw.io を利用する方法</h2><p>draw.io は様々な形で利用することができます。個人的にはこの点が draw.io を使うようになったポイントになりましたので、紹介させていただきます。</p><h3 id="1-ブラウザ上で利用する"><a href="#1-ブラウザ上で利用する" class="headerlink" title="1. ブラウザ上で利用する"></a>1. ブラウザ上で利用する</h3><p>最も簡単かつシンプルな方法です。ブラウザで<a href="https://www.draw.io/" target="_blank" rel="noopener">draw.io</a>を開くだけなので、他に必要なものは何もないですね。普段私は MacBook Air 13 (Early 2015) を使って Chrome 上で作業しますが、サクサク動いてくれて快適です。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_8_pic_1.jpg" alt=""></p><p>サポートされているブラウザについて、<a href="https://github.com/jgraph/drawio#supported-browsers" target="_blank" rel="noopener">GitHub リポジトリ</a>に記載されている内容を引用しておきます。モダンなブラウザであれば問題なさそうですね。</p><blockquote><p>Supported Browsers<br>draw.io supports IE 11, Chrome 32+, Firefox 38+, Safari 9.1.x, 10.1.x and 11.0.x, Opera 20+, Native Android browser 5.1.x+, the default browser in the current and previous major iOS versions (e.g. 11.2.x and 10.3.x) and Edge 23+.</p></blockquote><h3 id="2-デスクトップアプリを利用する"><a href="#2-デスクトップアプリを利用する" class="headerlink" title="2. デスクトップアプリを利用する"></a>2. デスクトップアプリを利用する</h3><p>人によっては「ブラウザよりもデスクトップアプリの方が作業しやすい」ということもあるのではないでしょうか。Slack 等もそうですが、人それぞれの作業スタイルがありますので、Electron ベースで作られているデスクトップアプリを利用するのも良い選択です。こちらもオープンソース化（※<a href="https://github.com/jgraph/drawio-desktop" target="_blank" rel="noopener">drawio-desktop</a>）されています。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_8_pic_2.jpg" alt=""></p><p>下記ページを開くと「draw.io Desktop」とありますので、Windows/Mac/Linux 環境に合わせてダウンロードすることができます。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://about.draw.io/integrations/" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/5RR58lK"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>Chrome App としても提供されていますね。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://chrome.google.com/webstore/detail/drawio-desktop/pebppomjfocnoigkeepgbmcifnnlndla?hl=en-GB" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/EfSPqIV"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h3 id="3-クラウドサービス等と組み合わせて利用する"><a href="#3-クラウドサービス等と組み合わせて利用する" class="headerlink" title="3. クラウドサービス等と組み合わせて利用する"></a>3. クラウドサービス等と組み合わせて利用する</h3><p>draw.io 単体ではなく、プラグインとして他のサービスと組み合わせて利用する方法です。</p><h3 id="Confluence-amp-Jira-app"><a href="#Confluence-amp-Jira-app" class="headerlink" title="Confluence & Jira app"></a>Confluence & Jira app</h3><p>定番の Atlassian 製ソフトウェア開発ツールとの組み合わせです。Cloud版・Server版の両方に対応しており、多くの現場で導入しやすいのではないかと思います。Confluence の場合、Page 内で図を作成・管理することができ、作成した図を他のページに埋め込むこともできます。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="padding-bottom:48.913%;padding-top:120px"><a href="https://marketplace.atlassian.com/apps/1210933/draw-io-diagrams-for-confluence" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/mKRd2Kg"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>ただし、有料となりますので注意が必要です。先程 draw.io の不便なところとして「書いた図を共有する仕組みがない」と書きましたが、このパターンですとある程度解決します。また、リアルタイムでは無理ですが複数の人が図を更新していくことが可能になります。</p><p>料金は2019年8月時点で 10 ユーザーまで 570円、以降 100 ユーザーまで 1 ユーザーあたり 60 円となっていますね。</p><p>Confluence の場合、登録を完了すると、スペースのメニューに「draw.io Diagrams」が表示されます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_8_pic_3.png" alt=""></p><p>また、「マクロの選択」にて図の作成と埋め込みの機能が追加されます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_8_pic_4.jpg" alt=""></p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>公式サイトによると、以下のサービスとの統合もサポートされています。<br><br></p><ul><li><a href="https://gsuite.google.com/marketplace/app/drawio_diagrams/671128082532" target="_blank" rel="noopener">G Suite and Google Drive</a></li><li><a href="https://appsource.microsoft.com/ja-JP/product/office/wa200000113" target="_blank" rel="noopener">Office 365 and One Drive</a></li></ul><p>他にも、draw.io で作成した図をWordPress や Redmine 上に埋め込むためのプラグインなどもありますので、各現場の環境に合わせた使い方を工夫してみてはいかがでしょうか。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;システム構成図を書く時、ツール選びに悩むことってありませんか？&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_blog_8_thumbnail.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;システム構成図に限らずとも、
      
    
    </summary>
    
    
      <category term="開発環境" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/"/>
    
    
      <category term="draw.io" scheme="https://riotz.works/articles/tags/draw-io/"/>
    
      <category term="システム構成図" scheme="https://riotz.works/articles/tags/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E6%88%90%E5%9B%B3/"/>
    
      <category term="ツール" scheme="https://riotz.works/articles/tags/%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="お絵かきツール" scheme="https://riotz.works/articles/tags/%E3%81%8A%E7%B5%B5%E3%81%8B%E3%81%8D%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Outlook で、自分のアドレスを常に Cc に入れる</title>
    <link href="https://riotz.works/articles/lulzneko/2019/08/23/always-put-my-address-in-cc-in-outlook/"/>
    <id>https://riotz.works/articles/lulzneko/2019/08/23/always-put-my-address-in-cc-in-outlook/</id>
    <published>2019-08-22T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>マイクロソフトのメール＆スケジュール管理ソフトの Outlook。この Outlook、メールを送る際に自分を Cc なり Bcc に設定しておきたいのですが、設定方法が見つかりません。そう、設定ではなくルール、仕分けルールとして定義する必要があるのです。設定方法について紹介します。</p><p><img src="/articles/assets/lulzneko/domain/mail/mail.jpg" alt=""></p><p>Outlook、主に仕事で使っているます。自分が送ったメールは [送信済みアイテム] にあるので基本的には問題ないのですが、自分で仕分けしていたり、レスがなかったりすると送ったメールがどこ行ったか分からなくなるので、Cc か Bcc で自分宛にも送っておきたいところです。</p><p>基本的には一度定義すると Exchange Server に保存されているので、改めて定義する必要がないのですが何かの拍子に消えていたり、設定方法を聞かれたりするので備忘録。</p><p><strong>環境</strong><br>本記事の開発環境は以下となります。</p><ul><li>Windows 10 64bit</li><li>Office 365</li></ul><h2 id="仕分けルールの作成"><a href="#仕分けルールの作成" class="headerlink" title="仕分けルールの作成"></a>仕分けルールの作成</h2><p>Outlook を起動し、メール機能(受信トレイ)を表示します。<br>リボンの [移動グループ] から [ルール] - [仕分けルールと通知の管理] をクリックします。<br>※ [仕分けルールの作成] からは定義できません<br><img src="/articles/assets/lulzneko/client/outlook/01-001.png" alt=""></p><p>仕分けルールと通知の管理ダイアログから、[新しい仕分けルール] をクリックします。<br><img src="/articles/assets/lulzneko/client/outlook/01-002.png" alt=""></p><p>ウィザードが開始されるので [送信メッセージにルールを適用する] を選択し [次へ] をクリックします。<br>([仕分けルールと通知の管理] から来ないと、このメニューがないのでハマった。。。)<br><img src="/articles/assets/lulzneko/client/outlook/01-003.png" alt=""></p><p>続いて条件指定の定義選択が表示されます。<br><strong>何もチェックをつけず</strong>に [次へ] をクリックします。<br><img src="/articles/assets/lulzneko/client/outlook/01-004.png" alt=""></p><p>条件なし、すなわち、すべての送信メッセージ。[はい] をクリックします。(わかりにくい。。)<br><img src="/articles/assets/lulzneko/client/outlook/01-005.png" alt=""></p><p>処理の定義選択が表示されます。<br>[名前/パブリックグループをメッセージの [CC] に追加する]へチェックをします。<br>ダイアログ下段の [ステップ 2] に表示されている [名前/パブリックグループ] をクリックし、アドレス帳から自分のメールアドレスを選択します。<br><img src="/articles/assets/lulzneko/client/outlook/01-006.png" alt=""></p><p>例外条件の定義選択が表示されます。<br>自分宛のメールの場合は追加する必要がないので、[[宛先] または [CC] が名前/パブリックグループの場合を除く] にチェックします。<br>ダイアログ下段の [ステップ 2] に表示されている [名前/パブリックグループ] をクリックし、アドレス帳から自分のメールアドレスを選択します。<br><img src="/articles/assets/lulzneko/client/outlook/01-007.png" alt=""></p><p>最後に [仕分けルールの名前] を入力し [完了] をクリックします。(ここでは Cc: Self としましたが、良いネーミングを考えたい)<br>※ 下図は [名前/パブリックグループ] になってますが、実際には自分の名前が表示されている状態になります<br><img src="/articles/assets/lulzneko/client/outlook/01-008.png" alt=""></p><p>クライアントサイドのルールであること警告されます。Exchange Server 内で処理されず Outlook のソフトウェアだけで適用されます。とくに問題ありません。<br>(ウェブアクセス版では、このルールが適用されないのでウェブアクセス版を使う場合は注意が必要です)<br><img src="/articles/assets/lulzneko/client/outlook/01-009.png" alt=""></p><p>無事、追加されました。<br><img src="/articles/assets/lulzneko/client/outlook/01-010.png" alt=""></p><p>メール作成の際には、Cc は空ですが送信時には追加されています。<br><img src="/articles/assets/lulzneko/client/outlook/01-011.png" alt=""></p><hr><p>設定できているもののメール作成画面で表示されないので、ちょっと安心できない ＆ 設定が消えていることに気づきにくい。。。</p><p>できれば Bcc がよいのですが、良い設定方法が見つからず、今回の設定を使っています。<br>(長年慣れ親しんだ<a href="http://www.rimarts.co.jp/becky-j.htm" target="_blank" rel="noopener">Becky! Internet Mail</a>が使いたいんだけどなぁ)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;マイクロソフトのメール＆スケジュール管理ソフトの Outlook。この Outlook、メールを送る際に自分を Cc なり Bcc に設定しておきたいのですが、設定方法が見つかりません。そう、設定ではなくルール、仕分けルールとして定義する必要があるのです。設定方法について紹
      
    
    </summary>
    
    
      <category term="開発環境" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Shiftup! JP_Getshifter Vol5！ にて「Shifter ＋ SSG の世界」について発表をしました</title>
    <link href="https://riotz.works/articles/lulzneko/2019/08/21/made-presentation-about-shifter-with-ssg-at-shiftup-vol5/"/>
    <id>https://riotz.works/articles/lulzneko/2019/08/21/made-presentation-about-shifter-with-ssg-at-shiftup-vol5/</id>
    <published>2019-08-20T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>2019年8月7日に開催された「Shiftup! JP_Getshifter Vol5 暑気払い！WordPressとJAMstackの夕べ」で『Shifter ＋ SSG(Static Site Generator) が生み出す、新しい WordPress の世界』と題して、WordPress の新しい世界について発表をしました。そのサマリーです。</p><p><img src="/articles/assets/lulzneko/seminar/shifter/shifter.png" alt=""></p><p>第３回のイベント<a href="https://riotz.works/articles/lulzneko/2019/04/05/made-presentation-about-jamstack-at-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ で JAMstack な サーバーレス ウェブフロント に ついて発表</a>をした際に、<a href="https://www.getshifter.io/japanese/" target="_blank" rel="noopener">Shifter</a>から SSG(Static Site Generator) でサイト生成できたらよいという話で盛り上がり、<a href="https://riotz.works/articles/lulzneko/2019/04/06/think-of-shifters-headlesscms-nize-on-shiftup-vol3">Shiftup! JP_Getshifter Vol3！ 振り返り、Shifter の HeadlessCMS 化に思いを馳せる</a>という記事を書きました。</p><p>そしたら Shifter さんの神対応があり「<a href="https://www.digitalcube.jp/shifter/4434/" target="_blank" rel="noopener">Shifter Webhooksで Netlify上のGatsbyサイトにWordPressコンテンツをインポート可能になりました - 株式会社デジタルキューブ</a>」というアップデートが即だされました。Shifter スゴイ！</p><p>その流れから、Shifter で SSG が使えると何が嬉しいのか、どんな世界が描けるのか、当初考えていたことを整理し発表しました。</p><p><strong>シリーズの記事</strong></p><ul><li><strong>Shiftup! JP_Getshifter Vol5！ にて「Shifter ＋ SSG の世界」について発表をしました</strong>(本記事)</li><li><a href="https://riotz.works/articles/lulzneko/2019/04/05/made-presentation-about-jamstack-at-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ で JAMstack な サーバーレス ウェブフロント に ついて発表をしました</a></li><li><a href="https://riotz.works/articles/lulzneko/2019/04/03/take-seminar-on-shiftup-vol3/">Shiftup! JP_Getshifter Vol3！ 参加レポート</a></li><li><a href="https://riotz.works/articles/lulzneko/2019/04/06/think-of-shifters-headlesscms-nize-on-shiftup-vol3">Shiftup! JP_Getshifter Vol3！ 振り返り、Shifter の HeadlessCMS 化に思いを馳せる</a></li></ul><h2 id="“Shiftup-JP-Getshifter-Vol5-暑気払い！WordPressとJAMstackの夕べ”-概要"><a href="#“Shiftup-JP-Getshifter-Vol5-暑気払い！WordPressとJAMstackの夕べ”-概要" class="headerlink" title="“Shiftup! JP_Getshifter Vol5 暑気払い！WordPressとJAMstackの夕べ” 概要"></a>“Shiftup! JP_Getshifter Vol5 暑気払い！WordPressとJAMstackの夕べ” 概要</h2><p>発表したイベント<a href="https://eventregist.com/e/0if9nERXstQg" target="_blank" rel="noopener">Shiftup! JP_Getshifter Vol5 暑気払い！WordPressとJAMstackの夕べ</a>は、サーバーレスな WordPress ホスティング<a href="https://www.getshifter.io/japanese/" target="_blank" rel="noopener">Shifter</a>のユーザーコミュニティの勉強会です。</p><p>会場は決済サービスの<a href="https://stripe.com/ja-JP/" target="_blank" rel="noopener">Stripe</a>さん。原宿は竹下口交差点のステキなロケーション＆最高な眺めのオフィスです。ちょうど Stripe さんのセッション中に「神宮花火ナイター」の花火が上がり、絶好の眺めとなりました。花火が見えるオフィス、いいなぁ。</p><h2 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h2><p>『<a href="https://riotz.works/slides/2019-shiftup-jp_getshifter-vol5">Shifter ＋ SSG(Static Site Generator) が生み出す、新しい WordPress の世界</a>』の発表資料はこちらになります。(下記、スライド埋め込み)</p><div class="slide"><iframe src="https://riotz.works/slides/2019-shiftup-jp_getshifter-vol5"></iframe></div><h2 id="サマリー"><a href="#サマリー" class="headerlink" title="サマリー"></a>サマリー</h2><p>発表の主旨は「Shifter と SSG を使って、WordPress のウェブフロントの新しい考え方を作ろう」です。</p><p>おおきく３つのテーマで発表しました。</p><ol><li>Shifter が もたらした、新世界</li><li>Shifter ＋ SSG が 生み出す、さらなる新世界</li><li>Shifter + SSG の 可能性</li></ol><p>前半は Shifter の機能やメリットを振り返る内容で、後半から SSG と組み合わせた場合の世界、メリットの話になります。</p><h3 id="Shifter-が-もたらした、新世界"><a href="#Shifter-が-もたらした、新世界" class="headerlink" title="Shifter が もたらした、新世界"></a>Shifter が もたらした、新世界</h3><p>まずは、WordPress と Shifter の違いについてです。WordPress は言わずと知れた世界でもっとも使われている CMS。ウェブサイトの 30% は WordPress と言われているぐらいだそうです。</p><p>そんな、すごい WordPress の世界ですが少し困り事も。WordPress サイトの立ち上げまでは、ある程度情報があるし楽しめるところもあります。しかしながら、セキュリティ対策は難しい面もありますし、なにより運用段階での各種バージョンアップ対応が大変。ウェブサイトなので、どうしても不特定多数からアクセスされるのでセキュリテ対策と継続的なバージョンアップは必須です。</p><p>そうした中、Shifter は “Serverless WordPress”、”JAMstack WordPress” という形で困り事に対処してくれます。</p><p>ひとつは、<strong>Serverless WordPress</strong>(または<strong>Managed WordPress</strong>や<strong>WordPress SaaS</strong>)。<br>Shifter へサインアップしてサイトを作るだけで WordPress の環境が構築される、そして構築された環境のバージョンアップなどのメンテは Shifter がやってくれる。これにより、どれだけの困り事がなくなるか。<br><img src="/articles/assets/lulzneko/seminar/shifter/05-01.png" alt=""></p><p>もう１つは、<strong>JAMstack WordPress</strong>。<br>これも Shifter のスゴイところ。「<a href="https://jamstack.org/" target="_blank" rel="noopener">JAMstack 公式</a>」では、WordPress は JAMSstack ではない “A site built with a server-side CMS like WordPress, Drupal, Joomla, or Squarespace. -<a href="https://jamstack.org/#what" target="_blank" rel="noopener">JAMstack</a>“ と言っています。しかしながら Shifter は JAMSstack として実現しています。<br>これによりパフォーマンスとスケーリングを実現し、WordPress として本体をさわる人を限定することでセキュリテ問題を局所化＆<strong>Serverless WordPress</strong>でセキュリティ対策をしています。<br><img src="/articles/assets/lulzneko/seminar/shifter/05-02.png" alt=""></p><h3 id="Shifter-＋-SSG-が-生み出す、さらなる新世界"><a href="#Shifter-＋-SSG-が-生み出す、さらなる新世界" class="headerlink" title="Shifter ＋ SSG が 生み出す、さらなる新世界"></a>Shifter ＋ SSG が 生み出す、さらなる新世界</h3><p>ここまで「”至れり尽くせり” な WordPress = Shifter」ですが、あと１つ。ウェブフロントの開発を WordPress Theme だけでなく、何とかしたい。JAMSstack の技術にしたいというがあります。</p><p>それが Shiftup! JP_Getshifter Vol3！ で、参加者の皆さま、Shifter の中の人と、お話しさせていただいた「<a href="https://riotz.works/articles/lulzneko/2019/04/06/think-of-shifters-headlesscms-nize-on-shiftup-vol3">Shifter の WordPress HeadlessCMS 化に思いを馳せる</a>」であり、神対応していただいた<a href="https://www.digitalcube.jp/shifter/443" target="_blank" rel="noopener">Shifter Webhooks + SSG</a>です！<br><img src="/articles/assets/lulzneko/seminar/shifter/05-03.png" alt=""></p><p>こちらの機能が欲しかったのは、PHP の中に HTML/CSS/JavaScript を書くのが大変、つまり JAMSstack(の “Better Developer Experience”) でない最後の困り事を解決したかった。もし JAMSstack 系の技術だけで WordPress のウェブフロントを作れたらすごいのではないか？そして、その先に？ということです。</p><h3 id="Shifter-SSG-の-可能性"><a href="#Shifter-SSG-の-可能性" class="headerlink" title="Shifter + SSG の 可能性"></a>Shifter + SSG の 可能性</h3><p>ウェブフロントの世界では JAMSstack という考えが広まりつつあります。詳しくは<a href="https://riotz.works/articles/lulzneko/2019/01/23/jamstack-an-architecture-to-realize-fine-web-front/">JAMstack、それはハイパフォーマンスなウェブフロントを実現するアーキテクチャ</a>を、ご参照ください。</p><p>一方で JAMSstack なウェブサイトとはいえデータソースは必要です。JAMSstack が、一番得意なのは情報発信サイト。つまり WordPress のような CMS に投稿された情報発信するようなサイト。</p><p>CMS といえば？＝ WordPress、これまでの話の通り WordPress を使うなら Shifter のメリットを生かすとよいでしょう。そして、ウェブフロントを<a href="https://gridsome.org/" target="_blank" rel="noopener">Gridsome</a>や<a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">GatsbyJS</a>といった SSG を使って作る。これにより、ウェブ・フロントエンドの技術者が WordPress のサイトでありながら、ウェブ・フロントエンドの技術だけウェブサイトを実現できるようになります。新しい世界が作られ、新たな市場が生まれるといっても過言ではないでしょう。<br><img src="/articles/assets/lulzneko/seminar/shifter/05-04.png" alt=""></p><p>これまでにも WordPress の Theme を SSG 系の技術(の要素技術といったほうが正しいかな)を使って作る方法はありましたが、SSG だけで作るケースは少なかったと思います。それは WordPress の REST API を使う必要があるからです。そうなると結局 WordPress を運用するので、あえて SSG を使うよりも WordPress の技術スタックで作るほうがよいです。</p><p>Shifter により WordPress の構築・運用から解放されることで WordPress ＋ SSG が急浮上します。むしろ通常のウェブフロントの開発と同じになります。純粋にウェブフロントだけを管理するようなモデルが生まれるのではないでしょうか。</p><hr><p>Shifter + SSG、新しいウェブサイト開発の潮流になるのではないかと思っています。</p><p>SSG を使った JAMSstack サイトの開発としては、データの投入として Headless CMS を使うケースがあります。最近は Headless CMS である<a href="https://www.contentful.com/" target="_blank" rel="noopener">Contentful</a>などの名前を聞くケースが増えてきました。</p><p>新しいサービスはもちろんウェルカムなのですが、１つだけ困ることがあります。記事を書く人が「そのサービスを使い倒すことができるか？」です。</p><p>個人やエンジニアブログなどでしたらよいのですが、技術系ではない人が使うには難しかったり、情報が少なくて調べられない、知ってる人や使ってる人が少ないなどの問題が出てきます。その点で WordPress は No.1 CMS であり多くの情報や利用者がいます。このアドバンテージを生かしつつ、WordPress の構築・運用からは手離れ、ウェブフロントをモダンな技術で手早く作る。</p><p>まだ Shifter Webhooks ＋ SSG も出たばかりですし、これからだと思いますが新しい流れができたら、おもしろいですね。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年8月7日に開催された「Shiftup! JP_Getshifter Vol5 暑気払い！WordPressとJAMstackの夕べ」で『Shifter ＋ SSG(Static Site Generator) が生み出す、新しい WordPress の世界』と題し
      
    
    </summary>
    
    
      <category term="プレゼンテーション" scheme="https://riotz.works/articles/categories/%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
    
      <category term="Nuxt.js" scheme="https://riotz.works/articles/tags/Nuxt-js/"/>
    
      <category term="JAMstack" scheme="https://riotz.works/articles/tags/JAMstack/"/>
    
      <category term="Gridsome" scheme="https://riotz.works/articles/tags/Gridsome/"/>
    
      <category term="Shifter" scheme="https://riotz.works/articles/tags/Shifter/"/>
    
      <category term="WordPress" scheme="https://riotz.works/articles/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>OpenAPI (Swagger) 3.0 で Bearer トークンの使用を定義する</title>
    <link href="https://riotz.works/articles/lopburny/2019/08/17/describe-bearer-scheme-in-openapi-3/"/>
    <id>https://riotz.works/articles/lopburny/2019/08/17/describe-bearer-scheme-in-openapi-3/</id>
    <published>2019-08-16T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bearer トークンを使用して WebAPI 呼び出しをする場合、OpenAPI (Swagger) 3.0 ではどのように記述するのでしょうか。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_7_thumbnail.jpg" alt=""></p><p>OpenAPI (Swagger) で WebAPI の仕様を記述する際、HTTP 認証・認可を行うための手段として Basic 認証・Bearer スキーム・API キー等の使用を定義することができます。この記事ではアクセストークン等による Bearer スキームの記述方法について紹介します。</p><p>※ OpenAPI (Swagger) については以下の記事で取り上げていますので、合わせてご確認ください。<br><br></p><div class="iframely-embed"><div class="iframely-responsive" style="padding-bottom:41.1101%;padding-top:120px"><a href="https://riotz.works/articles/lopburny/2019/07/21/efficient-way-to-manage-api-definition/index.html" data-iframely-url="//cdn.iframe.ly/EKy6Ncm"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="Bearer-スキームとは"><a href="#Bearer-スキームとは" class="headerlink" title="Bearer スキームとは"></a>Bearer スキームとは</h2><p>HTTP 認証スキームの一つで、WebAPI へアクセスするためのセキュリティトークン（アクセストークン等）を<code>Authorization: Bearer {トークン}</code>という形で HTTP ヘッダーにセットし、トークンの受け渡しを行う仕組みです。ここでは詳細を割愛させていただきますが、気になる方は以下をご参考ください。</p><br><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://qiita.com/uasi/items/cfb60588daa18c2ec6f5" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/iXzaVCj"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><p>WebAPI の仕様として Bearer トークンの使用を明記し、Swagger UI の動作に反映させることです。Swagger UI で見ると、以下のように Authorize ボタンが表示されます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_7_pic_1.jpg" alt=""></p><p>赤枠のボタンをクリックすると以下のダイアログが表示され、Bearer トークンを入力することができます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_7_pic_2.jpg" alt=""></p><p>トークンを入れて Authorize ボタンをクリックすると、Bearer スキームが指定されている API は Swagger UI 上から Bearer トークン付きでリクエストが送信されます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_7_pic_3.jpg" alt=""></p><p>Bearer スキームの Authorization ヘッダーがついていますね。</p><p>※<code>Bearer</code>という文字列も挿入されますので、こちらで入れる必要はありません。</p><h2 id="記述方法"><a href="#記述方法" class="headerlink" title="記述方法"></a>記述方法</h2><p>ここでは OpenAPI の記述に YAML 形式を使用します。<br><br></p><ol><li><code>components.securitySchemes</code>に Bearer スキームを追加します。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span>  </span><br><span class="line">  <span class="attr">securitySchemes:</span></span><br><span class="line">    <span class="attr">Bearer:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">bearer</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Credentials</span> <span class="string">or</span> <span class="string">access</span> <span class="string">token</span> <span class="string">for</span> <span class="string">API</span></span><br></pre></td></tr></table></figure></li></ol><br>2. Bearer スキームを使用する API を指定します。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users/me:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Bearer:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><p>※ ルートレベルの<code>security</code>を定義すると、すべての API に適用されます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Bearer:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><p>記述する場所を分かりやすくするため、簡単な図で表現すると以下のようになります。<br>OpenAPI Object の詳細は<a href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.0.md#openapi-object" target="_blank" rel="noopener">こちら</a>でご確認ください。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_7_pic_4.png" alt=""></p><p>ご参考までに、OpenAPI (Swagger) 2 では、ルートレベルに<code>securityDefinitions</code>を定義して各 API に指定します。OpenAPI 3 になって項目が多少変わっていますので注意が必要です。</p><p>いかがだったでしょうか。</p><p>前回の記事に続き、Swagger UI を利用する便利さをお伝えしたく、WebAPI 呼び出しに Bearer トークンが必要となる場合の API 定義について記事にしてみました。最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bearer トークンを使用して WebAPI 呼び出しをする場合、OpenAPI (Swagger) 3.0 ではどのように記述するのでしょうか。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_blog_7_
      
    
    </summary>
    
    
      <category term="開発" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA/"/>
    
    
      <category term="WebAPI" scheme="https://riotz.works/articles/tags/WebAPI/"/>
    
      <category term="OpenAPI" scheme="https://riotz.works/articles/tags/OpenAPI/"/>
    
      <category term="Swagger" scheme="https://riotz.works/articles/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>レイアウト微調整に便利な Spacing Helper (Vuetify) を使ってみる</title>
    <link href="https://riotz.works/articles/lopburny/2019/08/12/arrange-vuetify-components-with-spacing-helper/"/>
    <id>https://riotz.works/articles/lopburny/2019/08/12/arrange-vuetify-components-with-spacing-helper/</id>
    <published>2019-08-11T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Web UI を実装する時、追加したパーツが思った通りの位置に定まらず、どうしても微調整をしたくなることがあります。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_6_thumbnail.jpg" alt=""></p><p>Vuetify のような UI フレームワークを使用している場合、自前で CSS を書き足したり修正するようなカスタマイズは最小限にしておくことが良いと考えられますが、それでも「ここだけなんとかしたい」という場面が出てくると思います。具体的には margin や padding を指定して要素間の間隔を整えたりすることで、例えば以下のように Helper CSS を定義して対応することが多いのではないでしょうか。<br><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p-0</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pt-0</span> {</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pb-0</span> {</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pl-0</span> {</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pr-0</span> {</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>しかし、Bootstrap や Material-UI など、最近のメジャーな UI フレームワークには上記のような CSS Helper Class が予め用意されているので、これらを上手く活用することで、作業効率を高めることができ、きれいなレイアウトに仕上げることができます。この記事では、こういった UI フレームワークの一つ、Vuetify の Spacing Helper Class について紹介します。<br>※ 詳細は<a href="https://vuetifyjs.com/ja/styles/spacing" target="_blank" rel="noopener">Vuetify 公式ドキュメント</a>にて確認いただけます。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>微調整を行いたい要素に、下記フォーマットを用いてクラスを指定します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{property}{direction}-{size} // e.g. &lt;p class="mt-1" ...</span><br></pre></td></tr></table></figure><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>margin か padding のどれかを指定します。<br><br></p><ul><li><code>m</code>: margin</li><li><code>p</code>: padding</li></ul><h3 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h3><p>direction は指定した property の方向を定めます。</p><table><thead><tr><th>direction</th><th>方向</th></tr></thead><tbody><tr><td><code>t</code></td><td>top（トップ）</td></tr><tr><td><code>b</code></td><td>bottom（ボトム）</td></tr><tr><td><code>l</code></td><td>left（左）</td></tr><tr><td><code>r</code></td><td>right（右）</td></tr><tr><td><code>x</code></td><td>left と right</td></tr><tr><td><code>y</code></td><td>top と bottom</td></tr><tr><td><code>a</code></td><td>left, right, top, bottom 全てに適用</td></tr></tbody></table><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>size は property のサイズが 4px 単位で指定されます。<code>0</code>-<code>12</code>の数字が指定できます。<br>くっつけたい場合は<code>0</code>を指定します。</p><h2 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h2><p>以下、Title + Description 構成のリストに使用したサンプルです。各項目には<code>py-5</code>を適用して、間隔を広くしています。また description の行には<code>ml-5</code>を適用して、インデントを作ってみました。</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="lopburny" data-slug-hash="OKBZRQ" style="height:265px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em" data-pen-title="[Vuetify] Arrange components with spacing helpers "><span>See the Pen<a href="https://codepen.io/lopburny/pen/OKBZRQ/" target="_blank" rel="noopener">[Vuetify] Arrange components with spacing helpers</a>by lopburny (ロップバーニー) (<a href="https://codepen.io/lopburny" target="_blank" rel="noopener">@lopburny</a>) on<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>このサンプルは挙動を確認するためのシンプルなものですが、v-layout や v-card など色んなコンポーネントに適用できますので、何かと微調整が必要な場合に使用してみると便利だと思います。</p><p>いかがだったでしょうか。</p><p>この Spacing Helper については、前述のように Vuetify に限らず色んな UI フレームワークで提供されています。個人的には特にデザインの要件が無い限り自前で CSS を書きたくない人なのでこういう機能を重宝しますが、好き嫌いに関係なく必要に応じて便利な機能を使っていく姿勢が大事だと思います。記事を読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Web UI を実装する時、追加したパーツが思った通りの位置に定まらず、どうしても微調整をしたくなることがあります。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_blog_6_thumbnail.jpg&quot; a
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="Vuetify" scheme="https://riotz.works/articles/tags/Vuetify/"/>
    
      <category term="Vue.js" scheme="https://riotz.works/articles/tags/Vue-js/"/>
    
      <category term="CSS" scheme="https://riotz.works/articles/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>v-form (Vuetify) の submit イベントによってページがリロードされないようにする</title>
    <link href="https://riotz.works/articles/lopburny/2019/07/31/page-reload-issue-by-implicit-submission/"/>
    <id>https://riotz.works/articles/lopburny/2019/07/31/page-reload-issue-by-implicit-submission/</id>
    <published>2019-07-30T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/articles/assets/lopburny/img/lopburny_blog_5_thumbnail.jpg" alt=""></p><p>今回は Vuetify でシンプルな入力画面を実装するといった時に遭遇するかもしれない挙動の一つとその対応について紹介します。<br>v-form の中に一つの v-text-field を配置し、フォーカスを当てた状態で Enter キーを押すとページがリロードされることがあります。<br>投稿されて1年以上経過しているものですが、以下 Vuetify の GitHub Issue にも Bug Report がありました。</p><br><ul><li><p>[Bug Report] v-form with single v-text-input submits on enter<br><a href="https://github.com/vuetifyjs/vuetify/issues/3032" target="_blank" rel="noopener">https://github.com/vuetifyjs/vuetify/issues/3032</a></p></li><li><p>[Bug Report] v-form reloads the page when user press enter while editing v-text-field<br><a href="https://github.com/vuetifyjs/vuetify/issues/4302" target="_blank" rel="noopener">https://github.com/vuetifyjs/vuetify/issues/4302</a></p></li></ul><h2 id="リロードされる原因"><a href="#リロードされる原因" class="headerlink" title="リロードされる原因"></a>リロードされる原因</h2><p>この問題、実は Vuetify に限った話ではなく、前からある Implicit submission （暗黙の submit）という HTML の仕様によるもので、バグということではありません。</p><p>具体的にはデフォルトボタンによる submit が適用される場合で、入力中に Enter キーによって submit イベントが発火します。HTML の仕様書を読んでみると多少ややこしい記述にはなっていますが、少し抜粋して要約・補足すると下記のようになります。<br>🔗<a href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission" target="_blank" rel="noopener">https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission</a></p><blockquote><p>If the form has no submit button, then the implicit submission mechanism must do nothing if the form has more than one field that blocks implicit submission, and must submit the form element from the form element itself otherwise.</p></blockquote><p>form内に submit ボタンがない時、<br><br></p><ul><li>暗黙の submit をブロックする項目が２つ以上ある場合：暗黙の submit は動作しない</li><li>暗黙の submit をブロックする項目が１つある場合：Form document の URI へ submit する</li></ul><p>と定義されています。</p><blockquote><p>For the purpose of the previous paragraph, an element is a field that blocks implicit submission of a form element if it is an input element whose form owner is that form element and whose type attribute is in one of the following states: Text, Search, URL, Telephone, E-mail, Password, Date, Month, Week, Time, Local Date and Time, Number</p></blockquote><p>暗黙の submit をブロックする項目とは、form の中にある input 要素で、type 属性が Text, Search, URL, Telephone, E-mail, Password, Date, Month, Week, Time, Local Date and Time, Number というものです。</p><p>つまり、HTMLとしては「一つのテキストフィールドがある」及び「submit ボタン (<code>type="submit"</code>) がない」状態では、 Enter キーを押すことで sutmit するのが正しい仕様ということですね。</p><p>v-form コンポーネントを使用する場合、ボタンに v-btn を利用すると<code>type="button"</code>となるため、ブラウザによって暗黙の submit として扱われるようになることが原因となります。</p><p>CodePen で再現してみると以下のようになります。<br>※ Vue.js 2.6, Vuetify 2.0 を使っています。</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="lopburny" data-slug-hash="EqWmxG" style="height:265px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em" data-pen-title="(Vuetify) v-form reload issue sample"><span>See the Pen<a href="https://codepen.io/lopburny/pen/EqWmxG/" target="_blank" rel="noopener">(Vuetify) v-form reload issue sample</a>by lopburny (ロップバーニー) (<a href="https://codepen.io/lopburny" target="_blank" rel="noopener">@lopburny</a>) on<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>以下のように submit イベントを抑えてしまいます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> @<span class="attr">submit.prevent</span>></span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">...</span></span></span><br></pre></td></tr></table></figure><p>CodePen のサンプルはこちらです。<br>※ Vue.js の省略記法を使っています。</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="lopburny" data-slug-hash="gVWEPR" style="height:265px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em" data-pen-title="(Vuetify) v-form reload issue sample - resolved"><span>See the Pen<a href="https://codepen.io/lopburny/pen/gVWEPR/" target="_blank" rel="noopener">(Vuetify) v-form reload issue sample - resolved</a>by lopburny (ロップバーニー) (<a href="https://codepen.io/lopburny" target="_blank" rel="noopener">@lopburny</a>) on<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><a href="https://jp.vuejs.org/v2/guide/events.html#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E4%BF%AE%E9%A3%BE%E5%AD%90" target="_blank" rel="noopener">Vue.js 公式ドキュメント</a>にも、ピンポイントで対応方法が記載されています。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- submit イベントによってページがリロードされません --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>></span><span class="tag">&lt;/<span class="name">form</span>></span></span><br></pre></td></tr></table></figure><p>ユーザーに対して明示的に submit ボタンを押してもらうアクションを期待している場合は、これで解決します。<br>form 要素の submit イベントを抑制し、ボタンを押したときのクリックイベントで対応する形です。</p><p>しかし、あえて Enter キーを押した場合に submit イベントを発火したいということもあります。<br>Vuetify の場合、v-form コンポーネントと各入力要素の rule 属性によるバリデーションを実装することが多いので、このケースはあまりないかと思いますが、一応上記に加え下記のように対応することで実現できます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> @<span class="attr">keyup.enter</span>=<span class="string">"customMethod()"</span>></span><span class="tag">&lt;/<span class="name">v-text-field</span>></span></span><br></pre></td></tr></table></figure><p>いかがだったでしょうか。</p><p>今回紹介した挙動については、古くからある HTML の仕様なので Vuetify に限らず多くの記事が出ておりますが、<br>Vuetify 特有のバグや癖だと思ってハマることもあるかと思い、記事にしてみました。<br>最後まで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_blog_5_thumbnail.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;今回は Vuetify でシンプルな入力画面を実装するといった時に遭遇するかもしれない挙動の一つとその対
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="Vuetify" scheme="https://riotz.works/articles/tags/Vuetify/"/>
    
      <category term="Material Design" scheme="https://riotz.works/articles/tags/Material-Design/"/>
    
      <category term="Vue.js" scheme="https://riotz.works/articles/tags/Vue-js/"/>
    
      <category term="HTML" scheme="https://riotz.works/articles/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>CloudNative Days Tokyo 2019 にて「サーバレス・ネイティブ が お伝えする、フルサーバレス開発の魅力」の発表をしました</title>
    <link href="https://riotz.works/articles/lulzneko/2019/07/26/made-presentation-about-serverless-at-cloudnative-days-2019/"/>
    <id>https://riotz.works/articles/lulzneko/2019/07/26/made-presentation-about-serverless-at-cloudnative-days-2019/</id>
    <published>2019-07-25T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>2019年7月23日に開催された「CloudNative Days Tokyo 2019」で『サーバレス・ネイティブ が お伝えする、フルサーバレス開発の魅力』と題して、サーバーレスの魅力について発表しました。その発表サマリーです。</p><p><img src="/articles/assets/lulzneko/presentation/cloudnative-days/cloudnative-days-tokyo-2019.png" alt=""></p><h2 id="“CloudNative-Days”-概要"><a href="#“CloudNative-Days”-概要" class="headerlink" title="“CloudNative Days” 概要"></a>“CloudNative Days” 概要</h2><p>発表したイベント<a href="https://cloudnativedays.jp/cndt2019/" target="_blank" rel="noopener">CloudNative Days Tokyo 2019</a>は、元は ContainerDays というイベントで今年の４月から CloudNative Days と名称が変わりました。また今回は<a href="https://openstackdays.com/" target="_blank" rel="noopener">OpenStack Days Tokyo 2019</a>との共同開催です。４月の福岡をスタートに、７月の東京、11月の大阪と続きます。</p><p>会場は虎ノ門ヒルズフォーラム。はじめて行きました。地下鉄虎ノ門駅から細い歩道なので少し距離がある感じはしますが、新橋にも出られたりといい感じの場所です。</p><h2 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h2><p>『<a href="https://riotz.works/slides/2019-cloudnative-days/">サーバレス・ネイティブ が お伝えする、フルサーバレス開発の魅力</a>』の発表資料はこちらになります。(下記、スライド埋め込み)</p><div class="slide"><iframe src="https://riotz.works/slides/2019-cloudnative-days/"></iframe></div><h2 id="サマリー"><a href="#サマリー" class="headerlink" title="サマリー"></a>サマリー</h2><p>発表の主旨は「コンテナーもいいけど、サーバーレスもスゴクいいからね。ぜひ！」です。<br>大きく４つの観点からサーバーレスの魅力をお話しました。</p><ul><li>アイデアを即、形にできる 魅力</li><li>アプリの開発に専念できる 魅力</li><li>ピタゴラ装置を組み立てる 魅力</li><li>JAMstack な サイト管理の 魅力</li></ul><h3 id="アイデアを即、形にできる-魅力"><a href="#アイデアを即、形にできる-魅力" class="headerlink" title="アイデアを即、形にできる 魅力"></a>アイデアを即、形にできる 魅力</h3><p>モバイルアプリのハッカソンで、ラップバトルの動画中継と配信をするアプリを作ったのを例に、いかに高速でアプリが開発できるかを話しました。<br><img src="/articles/assets/lulzneko/presentation/cloudnative-days/01-001.png" alt=""></p><p>動画の取り扱いとなると、かなり手間がかかるのですが<a href="https://webrtc.ecl.ntt.com/" target="_blank" rel="noopener">SkyWay - Enterprise Cloud WebRTC Platform</a>を使うことで容易に動画中継と配信を実装できました。</p><p>また対戦ルーム管理などは Lambda と DynamoDB で構築しています。Web API を簡単に構築できる基本的な構成になります。「👍」やチャットなどのリアルタイムのコミュニケーションは Fibrebase を使い、マルチクラウドの構成となっています。</p><p>クラウドがさまざまな機能を用意してくれ、また SaaS によって必要な機能を組み合わせられるので、24時間という限られた時間でも動画を扱うようなアプリを作ることができます。この高速な開発力はアイデアをすぐに形にできる、サーバーレスの魅力のひとつといえるでしょう。</p><h3 id="アプリの開発に専念できる-魅力"><a href="#アプリの開発に専念できる-魅力" class="headerlink" title="アプリの開発に専念できる 魅力"></a>アプリの開発に専念できる 魅力</h3><p>IoT 製品のバックエンドを構築した際に、実行ランタイム(= 開発言語) を切り替えるというケースがあったのを例に、その様な事態でもアプリの開発(コーディング)だけに注力できるという話をしました。<br><img src="/articles/assets/lulzneko/presentation/cloudnative-days/01-002.png" alt=""></p><p>このプラットフォーム開発当時、Lambda の Java ランタイムは初期起動(コールドスタート)が遅いという問題がありました。それでも多くの場合、処理が遅いと感じるレベルで大問題にはならないのです。しかしながら私たちの場合はマイクロサービスとして、いくつもの Web API を相互呼出しする形になっていました。そのため初期スタートに当たる確率も高くなり、また初期スタートに当たるとリクエストがタイムアウトしてしまう問題へつながってしまいました。</p><p>いくつかあった解決策から実行ランタイムを Java から Node.js へ切り替えるという決断をします。開発言語が Java から JavaScript へ変わるのですが、TypeScript を導入することで Java チームとしても静的型付けによる親和性により切り替えに成功し、問題を解決しました。</p><p>実行ランタイムを変えるのはかなりの変更となりますが、AWS では監視やログなどが構成済みのため変更箇所はプログラムの再実装だけになります。ミドルウェアやスケールアウトさせるための仕組みなどを考える必要がないので、アプリ開発に専念できる魅力があります。</p><p>※ 補足<br>2019年７月現在、Lambda の起動が高速化され Java ランタイムのコールドスタートでも１秒ぐらいで起動しています。Java 実装が残っている部分で処理速度の確認があり気づきました。簡易で調べた結果なので、きちんとした検証は必要ですが、かなり改善されたのではないでしょうか。<br>またサービス提供者が性能を向上させてくれることで、システムのパフォーマンスが自動的によくなるメリットもあるとも言えるでしょう。</p><h3 id="ピタゴラ装置を組み立てる-魅力"><a href="#ピタゴラ装置を組み立てる-魅力" class="headerlink" title="ピタゴラ装置を組み立てる 魅力"></a>ピタゴラ装置を組み立てる 魅力</h3><p>クラウドの機能や SaaS の機能を組み合わせることを「ピタゴラ装置」に見立てて、お話しました。”ピタゴラ装置は NHK Eテレの番組『ピタゴラスイッチ』に登場するからくり装置 -<a href="https://ja.wikipedia.org/wiki/%E3%83%94%E3%82%BF%E3%82%B4%E3%83%A9%E8%A3%85%E7%BD%AE" target="_blank" rel="noopener">Wikipedia</a>“ です。最初のきっかけ以降は運動エネルギーを引き継いで流れていくもので、いわゆるドミノの複雑版といった感じです。</p><p>サーバーレスのイベント駆動でつながる処理がまさにピタゴラ装置的で、最初のイベントを受けて以降、次々と処理が流れていきます。たとえばラップバトルのピタゴラ装置は以下です。<br><img src="/articles/assets/lulzneko/presentation/cloudnative-days/01-003.png" alt=""></p><p>スマホアプリからルームの作成処理を API Gateway へリクエストします。API Gateway から Lambda が起動し、DynamoDB へルームのデータを登録します。<br>続いて通知を送るのですが、よくあるのが Lambda で「DB登録 ⇒ 通知」と処理を続けること。しかしイベント駆動で流すので、ここは DynamoDB Streams を使ってデータ登録のイベントから Lambda を起動して通知の処理をします。</p><p>このような形でクラウドの機能や SaaS を活用してアプリやシステムを組み立てていきます。これにより実装がシンプルになります。さまざまな機能を組み合わせつつ、シンプルな作りをする。これは楽しくもあり、多くのメリットを享受できる魅力とも言えます。</p><h3 id="JAMstack-な-サイト管理の-魅力"><a href="#JAMstack-な-サイト管理の-魅力" class="headerlink" title="JAMstack な サイト管理の 魅力"></a>JAMstack な サイト管理の 魅力</h3><p>JAMstack、最近 話題になりつつあり、フロントエンドやウェブの開発などで見聞きする機会が多いキーワードです。</p><p>サーバーサイドをサーバーレスで構築していても、フロントのためにウェブサーバー(動的な処理ができるサーバー)を用意するケースが多く、どうしてもシステム全体でサーバーレスにできないケースがあり、最近は JAMstack を推進しています。</p><p>JAMstack を簡単に言ってしまうと、HTML は事前生成してリクエスト時には動的に生成しない。動的要素はブラウザ(クライアントサイド)の JavaScript で Web API 等を呼び出して作るようにするということです。<br><img src="/articles/assets/lulzneko/presentation/cloudnative-days/01-004.png" alt=""></p><p>これにより、HTML は CDN に配置されウェブサーバーは必要としません。フロントを含めてサーバーレスにできます。サーバーレスであれば JAMstack でなくともよいのですが「フロントもサーバーレスで」というより「JAMstack で」といったほうがわかりやすいので、そのように言っています。</p><p>また JAMstack という観点からは、Serverless WordPress の<a href="https://www.getshifter.io/japanese/" target="_blank" rel="noopener">Shifter</a>という素晴らしいサービスがあるので紹介します。<br><img src="/articles/assets/lulzneko/presentation/cloudnative-days/01-005.png" alt=""></p><p>利用者としては、Shifter で WordPress を起動してコンテンツを編集。コンテンツの編集が完了したらサイト生成して、コンシューマー向けの静的サイトを作り、そちらへアクセスしてもらいます。これにより WordPress 本体へアクセスされないのでセキュリティを高められますし、静的サイトなので高速です。まさに JAMstack の思想を実現したサービスといえます。</p><p>コンテンツ管理はさまざまなサービスがあり、最近では「ヘッドレス CMS」なども登場していますが、やはり WordPress の使いやすいさ、そして認知度の高さは外せません。コンテンツ管理の仕組みが必要な場合は検討したいサービスです。</p><p>8/7(水) には、Shifter と Static Site Generator を組み合わせた、WordPress の新しい活用についてお話しますので、良かったらご参加ください。</p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://eventregist.com/e/0if9nERXstQg" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/K37jM7r"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p><img src="/articles/assets/lulzneko/presentation/cloudnative-days/01-006.png" alt=""></p><p>サーバーレスに興味を持っていただけましたら、ぜひ 10月の ServerlessDays Tokyo へお越しください。国内最大のサーバーレスのイベントです。</p><div class="iframely-embed"><div class="iframely-responsive" style="height:140px;padding-bottom:0"><a href="https://tokyo.serverlessdays.io/" target="_blank" rel="noopener" data-iframely-url="//cdn.iframe.ly/LSdMVaB?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><hr><p>元が ContainerDays という名前の通り、Docker や Kubernetes のセッションが多い構成の中、「サーバレス・ネイティブ」だの「フルサーバレス」というかなりイキり気味のセッションを採用いただけ、そして当日も空いているのが数えられるくらいの数席を、満席でのご参加いただきありがとうございます！</p><p>サーバーレスへの関心につながりましたら幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年7月23日に開催された「CloudNative Days Tokyo 2019」で『サーバレス・ネイティブ が お伝えする、フルサーバレス開発の魅力』と題して、サーバーレスの魅力について発表しました。その発表サマリーです。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/art
      
    
    </summary>
    
    
      <category term="プレゼンテーション" scheme="https://riotz.works/articles/categories/%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Vuetify 2.0 で追加された v-banner を使ってユーザーのアクションを促すボタン付きバナーを作る</title>
    <link href="https://riotz.works/articles/lopburny/2019/07/26/v-banner-introduction-of-vuetify-2.0/"/>
    <id>https://riotz.works/articles/lopburny/2019/07/26/v-banner-introduction-of-vuetify-2.0/</id>
    <published>2019-07-25T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>先日、Vuetify 2.0 がリリースされ、新しく追加されたコンポーネントの中で個人的にほしかったものを一つ紹介したいと思います。<br>※ 2.0のリリースで追加された機能とコンポーネントの一覧は、<a href="https://github.com/vuetifyjs/vuetify/releases#user-content-new-components-and-features" target="_blank" rel="noopener">こちら🔗</a>で確認できます。</p><h2 id="Banner"><a href="#Banner" class="headerlink" title="Banner"></a>Banner</h2><p><img src="/articles/assets/lopburny/img/lopburny_blog_4_pic_1.jpg" alt=""></p><p>Material Design 2 で登場した Banner ですが、ユーザーに「確認してほしい」メッセージと、「やってほしい」アクションのボタンを組み合わせて提示するコンポーネントです。Dialog や Snackbar でも似たようなことは実現できますが、その使い方については以下のように定義されています。</p><table><thead><tr><th>コンポーネント</th><th>優先度</th><th>ユーザーアクション</th></tr></thead><tbody><tr><td>Snackbar</td><td>低</td><td>任意。Snackbar は自動で表示されなくなる。</td></tr><tr><td>Banner</td><td>中</td><td>任意。Banner はユーザーによって非表示ボタンが押されるか、Banner を出す原因となった状態が解決されるまで表示される</td></tr><tr><td>Dialog</td><td>高</td><td>必須。Dialog はユーザーが提示されたアクションを実行するか閉じるまでアプリの使用をブロックする。</td></tr></tbody></table><p>※ Material Design 2 > Banners > Usage 抜粋<a href="https://material.io/design/components/banners.html#usage" target="_blank" rel="noopener">🔗</a></p><p>Banner は画面に一つのみ表示されるものとして、ユーザーにとって見やすい場所、つまり Top App Bar とコンテンツの間に配置されることが想定されています。Material Design 公式ドキュメントで紹介されている使い方の他にも、重要なメンテナンス予定の告知、アンケートやフィードバックの依頼、キャンペーン等の用途にも応用できるので、結構助かります。わざわざ Dialog を実装するほどでもないし、自動で表示されなくなる Snackbar だとユーザーに気づかれない場合に Banner を使うと便利かなと思います。</p><h2 id="VBanner-v-banner"><a href="#VBanner-v-banner" class="headerlink" title="VBanner (v-banner)"></a>VBanner (v-banner)</h2><p>Vuetify 2.0 のリリースにて VBanner コンポーネントが追加され、Web UI で使えるようになりました。Vuetify では、single-line / two-line / multi-line とメッセージの行数を指定、メッセージとボタンに加えてアイコンを表示することができます。下記、一般的に使われそうな用例を２つ紹介します。</p><h3 id="single-line-アクションボタン"><a href="#single-line-アクションボタン" class="headerlink" title="single-line + アクションボタン"></a>single-line + アクションボタン</h3><h4 id="画面イメージ"><a href="#画面イメージ" class="headerlink" title="画面イメージ"></a>画面イメージ</h4><p><img src="/articles/assets/lopburny/img/lopburny_blog_4_pic_2.png" alt=""></p><h4 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-banner</span> <span class="attr">single-line</span>></span></span><br><span class="line">  ここにバナーのメッセージが入ります。</span><br><span class="line">  メッセージが長くなれば文末が ... という感じで省略されます。</span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:actions</span>></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">text</span> <span class="attr">color</span>=<span class="string">"deep-purple"</span>></span>DISMISS<span class="tag">&lt;/<span class="name">v-btn</span>></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">text</span> <span class="attr">color</span>=<span class="string">"deep-purple"</span>></span>RETRY<span class="tag">&lt;/<span class="name">v-btn</span>></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-banner</span>></span></span><br></pre></td></tr></table></figure><h3 id="アイコン-two-line-アクションボタン"><a href="#アイコン-two-line-アクションボタン" class="headerlink" title="アイコン + two-line + アクションボタン"></a>アイコン + two-line + アクションボタン</h3><h4 id="画面イメージ-1"><a href="#画面イメージ-1" class="headerlink" title="画面イメージ"></a>画面イメージ</h4><p><img src="/articles/assets/lopburny/img/lopburny_blog_4_pic_3.png" alt=""></p><h4 id="サンプルコード-1"><a href="#サンプルコード-1" class="headerlink" title="サンプルコード"></a>サンプルコード</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">v-banner</span> <span class="attr">two-line</span>></span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-avatar</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">color</span>=<span class="string">"deep-purple"</span> <span class="attr">size</span>=<span class="string">"40"</span>></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-icon</span> <span class="attr">color</span>=<span class="string">"white"</span>></span></span><br><span class="line">      device_unknown</span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-icon</span>></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-avatar</span>></span></span><br><span class="line"> </span><br><span class="line">  デバイスの画面サイズに合わせてメッセージの文字数を確認しておく必要があります。</span><br><span class="line">  通常は 1-2 行が望ましく、簡潔で理解しやすい文章にすることが重要です。</span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:actions</span>></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">text</span> <span class="attr">color</span>=<span class="string">"deep-purple"</span>></span>LEARN MORE<span class="tag">&lt;/<span class="name">v-btn</span>></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">text</span> <span class="attr">color</span>=<span class="string">"deep-purple"</span>></span>GOT IT<span class="tag">&lt;/<span class="name">v-btn</span>></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-banner</span>></span></span><br></pre></td></tr></table></figure><br><p>いかがだったでしょうか。</p><p>Vuetify の公式ドキュメントには色んな設定値を適用して表示を確認できる<a href="https://vuetifyjs.com/ja/components/banners#playground" target="_blank" rel="noopener">Playground🔗</a>が提供されています。是非試してみてください。</p><p>現時点（2019年7月下旬）では Vuetify 2.0 がリリースされて間もないので、いきなり更新すると色々問題もあったりするみたいですが、そのうち改善されることを期待しています。これからのアップデートも楽しみですね！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先日、Vuetify 2.0 がリリースされ、新しく追加されたコンポーネントの中で個人的にほしかったものを一つ紹介したいと思います。&lt;br&gt;※ 2.0のリリースで追加された機能とコンポーネントの一覧は、&lt;a href=&quot;https://github.com/vuetifyj
      
    
    </summary>
    
    
      <category term="フロントエンド" scheme="https://riotz.works/articles/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    
      <category term="Vuetify" scheme="https://riotz.works/articles/tags/Vuetify/"/>
    
      <category term="Material Design" scheme="https://riotz.works/articles/tags/Material-Design/"/>
    
      <category term="Vue.js" scheme="https://riotz.works/articles/tags/Vue-js/"/>
    
      <category term="Nuxt.js" scheme="https://riotz.works/articles/tags/Nuxt-js/"/>
    
  </entry>
  
  <entry>
    <title>OpenAPI (Swagger) を利用して効率よく WebAPI の仕様を管理する</title>
    <link href="https://riotz.works/articles/lopburny/2019/07/21/efficient-way-to-manage-api-definition/"/>
    <id>https://riotz.works/articles/lopburny/2019/07/21/efficient-way-to-manage-api-definition/</id>
    <published>2019-07-20T15:00:00.000Z</published>
    <updated>2020-09-28T04:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/articles/assets/lopburny/img/lopburny_blog_3_thumbnail.jpg" alt=""></p><p>Web 開発の現場でよく耳にする言葉として Swagger というものがあります。アプリケーション開発においてサーバー（WebAPI）とデータの送受信を行う機能は不可欠なものとなっている現在、多くの現場ではそのための設計モデルとして REST (REpresentational State Transfer) という方式が使われています。この記事では、REST API の仕様ドキュメントを記述する手段として OpenAPI (Swagger) というものを紹介し、REST Client 機能を備えたインタラクティブな API 仕様ドキュメントを作成・共有する方法についてお伝えしたいと思います。</p><h2 id="OpenAPI-Swagger-とは？"><a href="#OpenAPI-Swagger-とは？" class="headerlink" title="OpenAPI (Swagger) とは？"></a>OpenAPI (Swagger) とは？</h2><p>OpenAPI Specification (OAS) といい、REST API の仕様を記述するためのフォーマットです。また Swagger とは、Open API を使用するツールのことで、以下のようなものがあります。<br><br></p><ul><li>Swagger Editor</li><li>Swagger UI</li><li>Swagger Codegen</li></ul><p>OpenAPI は、元々 Swagger Specification として知られています。REST API を定義するフォーマットの標準化を推進する団体 OpenAPI Initiative (OAI) が結成され、OAI の一員であり Swagger の開発元でもある SmartBear Software により Swagger Specification が寄贈（Donation）されたことで、Open API と言うようになりました。現場では Swagger の方が馴染みがあるので、OpenAPI と言うところはまだ少ないかもしれません。OAS 2.0 は Swagger Specification 2.0 に対応しており、現在（2019年7月）最新バージョンは 3.0 です。</p><h2 id="OpenAPI-を利用するメリット"><a href="#OpenAPI-を利用するメリット" class="headerlink" title="OpenAPI を利用するメリット"></a>OpenAPI を利用するメリット</h2><p>OpenAPI を利用すると何が良いのか、いくつかピックアップしてみました。</p><h3 id="API-定義のバージョン管理が楽になる"><a href="#API-定義のバージョン管理が楽になる" class="headerlink" title="API 定義のバージョン管理が楽になる"></a>API 定義のバージョン管理が楽になる</h3><p>基本的に YAML または JSON で記述するため、Git 等を使用してソースコードと同様に管理することができます。つまり、Word, Excel で記述された仕様書に比べて更新履歴を管理していく努力が削減されます。API 定義ファイルと実装を一緒にコミットすることで仕様と実装が乖離しにくくなるため、より正確かつ最新の情報を共有することができます。</p><h3 id="仕様が明確になる"><a href="#仕様が明確になる" class="headerlink" title="仕様が明確になる"></a>仕様が明確になる</h3><p>OAS のフォーマットに合わせて宣言的に書いていくことで曖昧な記述がなくなります。またデータの仕様を明記するための各種データ型がサポートされているので、仕様が明確になります。Swagger UI を利用する場合、Markdown で記述された項目の表示もサポートされ、細かい仕様や注意点を分かりやすく表現することができます。</p><h3 id="WebAPI-の仕様管理を仕組み化することができる"><a href="#WebAPI-の仕様管理を仕組み化することができる" class="headerlink" title="WebAPI の仕様管理を仕組み化することができる"></a>WebAPI の仕様管理を仕組み化することができる</h3><p>Swagger UI から API 定義ファイルを読み込むことでインタラクティブな Web ドキュメントを作成することができます。別途 REST Client を使うことなく Swagger UI 上で動作確認ができてしまいます。また Swagger Codegen を使ってクライアントライブラリ（SDK）を自動生成することもできますので、WebAPI を叩くクライアント側の実装も楽になります。</p><p>Amazon API Gateway を利用する場合、API 定義ファイルをインポートすることで API をデプロイすることができます。逆にソースコードから API 定義ファイルを生成する仕組みもあるので、実に色んな使い方ができます。API 定義ファイルの操作を CI に組み込むことで、仕様書の更新・クライアントSDKの生成と配布・WebAPIのデプロイなどをまとめて自動化することが可能になります。</p><p>※ OAS 2 と 3 でフォーマットが異なりますので、サービスによってサポートされる OAS バージョンに注意する必要があります。</p><h2 id="OpenAPI-導入イメージ（例）"><a href="#OpenAPI-導入イメージ（例）" class="headerlink" title="OpenAPI 導入イメージ（例）"></a>OpenAPI 導入イメージ（例）</h2><p><img src="/articles/assets/lopburny/img/lopburny_blog_3_diagram_1.jpg" alt=""></p><p>構成の概要としては、<br><br></p><ul><li>API定義ファイルは GitHub で管理</li><li>Swagger UI を SPA（シングルページアプリケーション）として静的サイトホスティング</li><li>CircleCI に連携して API 定義ファイルをアップロード</li></ul><p>といったところになります。</p><p>※ Swagger UI を自前でホスティングしないで SwaggerHub 等のサービスを利用する方法もありますが、この記事では割愛させていただきます。詳細は<a href="https://swagger.io/tools/swagger-ui/download/" target="_blank" rel="noopener">こちら</a>をご参考ください。</p><h3 id="Open-API-を利用して-API-定義を作成する"><a href="#Open-API-を利用して-API-定義を作成する" class="headerlink" title="Open API を利用して API 定義を作成する"></a>Open API を利用して API 定義を作成する</h3><p>YAML または JSON で API 定義を作成します。個人的には宣言的でコメントも書ける YAML の方がオススメです。作成にはどのようなエディタを使っても問題ないですが、編集時にリアルタイムで Swagger UI のプレビューを表示してくれる Swagger Editor が便利です。Validation までしてくれるのでとても助かります。フォーマットの仕様については、<a href="https://swagger.io/specification/" target="_blank" rel="noopener">こちら</a>をご参考ください。</p><p>※ OAS 2 と 3 でフォーマットが異なりますので、Web 等に掲載されているスニペットを参考にする場合は注意が必要です。</p><p>引き続き、作成した API 定義を Swagger UI で表示するため、メニューの「File」から「Save as YAML」を選択し、サンプルの API 定義を保存しておきます。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_3_pic_1.jpg" alt=""></p><h3 id="Swagger-UI-を使用して-API-定義ファイルを読み込む"><a href="#Swagger-UI-を使用して-API-定義ファイルを読み込む" class="headerlink" title="Swagger UI を使用して API 定義ファイルを読み込む"></a>Swagger UI を使用して API 定義ファイルを読み込む</h3><p>Swagger UI を API 仕様ドキュメントとして活用するためには、Swagger UI (SPA) と API 定義ファイルをホスティングする必要があります。例えば、以下のような構成にすることができます。</p><table><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td>Swagger UI</td><td><code>https://docs.sample-api.dev/swagger-ui/index.html</code></td></tr><tr><td>API 定義ファイル</td><td><code>https://docs.sample-api.dev/api-definitions/{Gitブランチ名}/sample.yml</code></td></tr></tbody></table><p>クエリパラメータに API 定義ファイルの URL を指定することで読み込まれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.sample-api.dev/swagger-ui/index.html?url={API定義ファイルのURL}</span><br></pre></td></tr></table></figure><p>また、API 定義ファイルのパスに Git ブランチ名を指定して CI を回すことで、API 定義ファイルそのもののバージョン管理ができるだけでなく、レビュー中のブランチについても仕様の確認が容易にできるような仕組みづくりが可能になります。</p><h3 id="Swagger-UI-を-SPA-としてホスティングする"><a href="#Swagger-UI-を-SPA-としてホスティングする" class="headerlink" title="Swagger UI を SPA としてホスティングする"></a>Swagger UI を SPA としてホスティングする</h3><p><a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">Swagger UI の GitHub リポジトリ</a>にて、ソースコードをダウンロードして解凍、 dist というディレクトリをまるごと静的サイトホスティングすれば OK です。</p><p><img src="/articles/assets/lopburny/img/lopburny_blog_3_pic_2.jpg" alt=""></p><p>このまま他の API 定義を読み込みたい場合は、下の赤枠に URL を入力して右側「Explore」ボタンを押します。各 API の項目を広げて「Try it out」、パラメータを入力して「Execute」することで、Swagger UI 上で API の動作確認ができます。別途 REST Client を使う必要がなく、とても便利です！</p><p>静的サイトホスティングについては色んな方法がありますが、AWS 環境であれば<a href="https://riotz.works/articles/lopburny/2019/07/05/hosting-static-web-page-on-aws-with-s3-and-cloudfront/">別の記事</a>でやり方を紹介しておりますので是非ご参考ください。Swagger UI を用意して社内向けまたは開発パートナー向けにアクセス制限をかけて共有するなど、色んな利用シーンが考えられるのではないでしょうか。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><br><ul><li>OpenAPI をうまく利用することで、API 仕様の明確化・管理の効率化が図れる</li><li>Swagger UI をインタラクティブな API 仕様ドキュメントとして活用する</li></ul><p>いかがだったでしょうか。</p><p>OAS で API 定義を書いていくと、かえって記述量が増えて疲れるようになったといった意見もありますので、この記事の内容がすべての現場にフィットするとは限りません。ですが、ある程度規模が大きく、人の入れ替わりも多いような現場であれば、仕様ドキュメントの管理をしっかり行いたいということもあるのではないかと思います。今後も OAS と Swagger の使い方について具体的に紹介していきたいと思いますので、まだ使ったことないよー！という方がいましたら、是非試してみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/articles/assets/lopburny/img/lopburny_blog_3_thumbnail.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Web 開発の現場でよく耳にする言葉として Swagger というものがあります。アプリケーション開発に
      
    
    </summary>
    
    
      <category term="開発" scheme="https://riotz.works/articles/categories/%E9%96%8B%E7%99%BA/"/>
    
    
      <category term="AWS" scheme="https://riotz.works/articles/tags/AWS/"/>
    
      <category term="WebAPI" scheme="https://riotz.works/articles/tags/WebAPI/"/>
    
      <category term="OpenAPI" scheme="https://riotz.works/articles/tags/OpenAPI/"/>
    
      <category term="Swagger" scheme="https://riotz.works/articles/tags/Swagger/"/>
    
      <category term="CircleCI" scheme="https://riotz.works/articles/tags/CircleCI/"/>
    
      <category term="Git" scheme="https://riotz.works/articles/tags/Git/"/>
    
      <category term="GitHub" scheme="https://riotz.works/articles/tags/GitHub/"/>
    
  </entry>
  
</feed>
